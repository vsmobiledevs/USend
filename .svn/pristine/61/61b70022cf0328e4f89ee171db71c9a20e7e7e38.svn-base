package com.usend.base

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.os.PersistableBundle
import android.view.MenuItem
import android.view.View
import android.view.Window
import android.view.WindowManager
import androidx.annotation.DrawableRes
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import com.usend.R
import com.usend.utils.PreferenceHelper.customPrefs
import com.spaceo.basecode.CustomProgressDialog
import com.usend.extensions.color
import com.usend.utils.*
import com.usend.utils.CommonUtils.showOkCallBackDialog
import com.usend.views.home.NotificationActivity
import kotlinx.android.synthetic.main.app_toolbar.view.*
import com.usend.utils.PreferenceHelper.set
import com.usend.views.MainActivity
import com.usend.views.userauth.SignInActivity


abstract class BaseActivity : AppCompatActivity(), View.OnClickListener {

    val prefs: SharedPreferences by lazy {
        this.customPrefs()
    }
    private var mProgressDialog: CustomProgressDialog? = null

    override fun onClick(v: View?) = Unit

    override fun onCreate(savedInstanceState: Bundle?, persistentState: PersistableBundle?) {
        super.onCreate(savedInstanceState, persistentState)

    }

    override fun onOptionsItemSelected(item: MenuItem?): Boolean {

        when (item?.itemId) {
            android.R.id.home -> {
                onBackPressed()
            }
        }
        return super.onOptionsItemSelected(item)
    }

    fun setStatusBarFlag(window: Window) {

        window.decorView.systemUiVisibility =
            View.SYSTEM_UI_FLAG_LAYOUT_STABLE or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR

        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            window.statusBarColor = Color.TRANSPARENT
        }
    }

    /**
     *  Set activity [Toolbar]
     **/
    private var homeEnabled = false

    fun initToolbar(toolbar: Toolbar, isVisible: Boolean = true, isRightTextVisible : Boolean = false, rightButtonText : String = "",
                        isBackVisible : Boolean = true,
                    title: String = "", showHomeAsUp: Boolean = true,
                    @DrawableRes leftIcon: Int = R.drawable.icn_back,
                    backColor: Int = color(R.color.colorWhite),
                    isNoti : Boolean = false)
    {

        setSupportActionBar(toolbar)
        homeEnabled = showHomeAsUp

        toolbar.imgBack.visibility = if(isBackVisible) View.VISIBLE else View.GONE
        toolbar.imgBack.setImageResource(leftIcon)
        toolbar.setBackgroundColor(backColor)
        toolbar.toolbarTitle.text = title

        if(isRightTextVisible)
        {
            toolbar.txtRightButton.visibility = View.VISIBLE
            toolbar.txtRightButton.text = rightButtonText
        }

        if (!isVisible) {
            toolbar.visibility = View.GONE
        }

        if(isNoti)
        {
            toolbar.imgNoti.visibility = View.VISIBLE
        }

        toolbar.imgBack.setOnClickListener {
            if (homeEnabled) {
                onBackPressed()
            }
        }

        toolbar.imgNoti.setOnClickListener {

            val intent = Intent(this, NotificationActivity::class.java)
            startActivityForResult(intent, REF_NOTIFICATION)
            //NotificationActivity.newIntent(this, Intent(this, NotificationActivity::class.java))
        }

        if(!prefs.getBoolean(IS_LOGIN,false))
        {
            toolbar.imgNoti.visibility = View.GONE
        }

        supportActionBar?.setDisplayShowTitleEnabled(false)
        //supportActionBar?.setDisplayHomeAsUpEnabled(showHomeAsUp)
        supportActionBar?.setHomeAsUpIndicator(leftIcon)
        supportActionBar?.setDisplayShowHomeEnabled(showHomeAsUp)
    }

    fun setToolbarTitle(toolbar: Toolbar, title: String)
    {
        toolbar.toolbarTitle.text = title
    }

    fun showProgressDialog(
        mContext: Context,
        title: String = "",
        message: String = getString(R.string.default_loading_message)
    ) {
        mProgressDialog = CustomProgressDialog(mContext)
        mProgressDialog?.let {
            it.setCanceledOnTouchOutside(false)
            it.setCancelable(false)
            if (title.isNotEmpty())
                it.setTitle(title)
            it.setMessage(message)
            it.show()
        }
    }

    fun hideProgressDialog() {
        mProgressDialog?.let {
            if (it.isShowing) {
                it.dismiss()
                mProgressDialog = null
            }
        }
    }

    private lateinit var resultCallback: (resultCode: Int, data: Intent?) -> Unit

    fun startActivityForResult(intent: Intent, callback: (data: Intent?) -> Unit) {
        startActivityForResult(intent) { resultCode, data ->
            if (resultCode == Activity.RESULT_OK) {
                callback(data)
            }
        }
    }

    fun startActivityForResult(intent: Intent, callback: (resultCode: Int, data: Intent?) -> Unit) {
        resultCallback = callback
        startActivityForResult(intent, 65535)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        if (::resultCallback.isInitialized && requestCode == 65535)
            resultCallback(resultCode, data)

        super.onActivityResult(requestCode, resultCode, data)
    }

    fun showTokenExpiredDialog(message: String) {
        showOkCallBackDialog(this, getString(R.string.lbl_session_expired), message) {
            clearDataAndLogout()
        }
    }

    fun clearDataAndLogout() {
        prefs[AUTH_KEY] = ""
        prefs[IS_LOGIN] = false
        prefs[IS_SUBSCRIPTION] = false

        MainActivity.newIntent(this, Intent(this, MainActivity::class.java)
            .putExtra(FROM, FROM_LOGOUT)
            .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        )
        finishAffinity()
    }

    fun setNotificationIcon(count : Int, toolbar: Toolbar)
    {
        if(count > 0)
        {
            toolbar.imgNoti.setImageResource(R.drawable.ic_bell_activited)
        }
        else
        {
            toolbar.imgNoti.setImageResource(R.drawable.ic_bell_normal)
        }
    }
}

