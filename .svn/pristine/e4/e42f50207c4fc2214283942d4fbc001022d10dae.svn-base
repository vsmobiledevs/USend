package com.usend.comman

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.*
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.RecyclerView
import java.time.format.TextStyle
import java.util.*
import kotlin.collections.ArrayList
import kotlin.collections.HashMap

abstract class SwipeHelper(context: Context) :
    ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT) {
        private var recyclerView: RecyclerView? = null
        private var buttons: MutableList<UnderlayButton>
        private var gestureDetector: GestureDetector? = null
        private var swipedPos = -1
        private var swipeThreshold = 0.5f
        private val buttonsBuffer: MutableMap<Int, MutableList<UnderlayButton>>
        private var recoverQueue: Queue<Int>? = null
        private val onTouchListener = View.OnTouchListener { view, e ->
            if (swipedPos < 0) return@OnTouchListener false
            view.performClick()
            val point = Point(
                e.rawX.toInt(), e.rawY
                    .toInt()
            )
            val swipedViewHolder = recyclerView!!.findViewHolderForAdapterPosition(swipedPos)
            val swipedItem = swipedViewHolder!!.itemView
            val rect = Rect()
            swipedItem.getGlobalVisibleRect(rect)
            if (e.action == MotionEvent.ACTION_DOWN || e.action == MotionEvent.ACTION_UP || e.action == MotionEvent.ACTION_MOVE) {
                if (rect.top < point.y && rect.bottom > point.y) gestureDetector?.onTouchEvent(e) else {
                    recoverQueue?.add(swipedPos)
                    swipedPos = -1
                    recoverSwipedItem()
                }
            }
            false
        }

        override fun onMove(
            recyclerView: RecyclerView,
            viewHolder: RecyclerView.ViewHolder,
            target: RecyclerView.ViewHolder,
        ): Boolean {
            return false
        }

        override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
            val positions = viewHolder.adapterPosition
            if (swipedPos != positions) recoverQueue?.add(swipedPos)
            swipedPos = positions
            if (buttonsBuffer.containsKey(swipedPos)) buttons =
                buttonsBuffer[swipedPos]!! else buttons.clear()
            buttonsBuffer.clear()
            swipeThreshold = 0.5f * buttons.size * BUTTON_WIDTH
            swipeThreshold = 0.5f * buttons.size * BUTTON_HIGHT
            recoverSwipedItem()
        }

        override fun getSwipeThreshold(viewHolder: RecyclerView.ViewHolder): Float {
            return swipeThreshold
        }

        override fun getSwipeEscapeVelocity(defaultValue: Float): Float {
            return 0.1f * defaultValue
        }

        override fun getSwipeVelocityThreshold(defaultValue: Float): Float {
            return 5.0f * defaultValue
        }

        override fun onChildDraw(
            c: Canvas,
            recyclerView: RecyclerView,
            viewHolder: RecyclerView.ViewHolder,
            dX: Float,
            dY: Float,
            actionState: Int,
            isCurrentlyActive: Boolean,
        ) {
            val positions = viewHolder.adapterPosition
            var translationX = dX
            val itemView = viewHolder.itemView
            if (positions < 0) {
                swipedPos = positions
                return
            }
            if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
                if (dX < 0) {
                    var buffer: MutableList<UnderlayButton> = arrayListOf()
                    if (!buttonsBuffer.containsKey(positions)) {
                        instantiateUnderlayButton(viewHolder, buffer)
                        buttonsBuffer[positions] = buffer
                    } else {
                        buffer = buttonsBuffer[positions]!!
                    }
                    translationX = dX * buffer.size * BUTTON_WIDTH / itemView.width
                    translationX = dX * buffer.size * BUTTON_HIGHT / itemView.height
                    drawButtons(c, itemView, buffer, positions, translationX)
                }
            }
            super.onChildDraw(c,
                recyclerView,
                viewHolder,
                translationX,
                dY,
                actionState,
                isCurrentlyActive)
        }

        @Synchronized
        private fun recoverSwipedItem() {
            while (!recoverQueue?.isEmpty()!!) {
                val position = recoverQueue!!.poll()
                if (position!! > -1) {
                    recyclerView!!.adapter!!.notifyItemChanged(position)
                }
            }
        }

        private fun drawButtons(
            c: Canvas,
            itemView: View,
            buffer: List<UnderlayButton>,
            pos: Int,
            dX: Float,
        ) {
            var right = itemView.right.toFloat()
            val dButtonWidth = -1 * dX / buffer.size
            for (button in buffer) {
                val left = right - dButtonWidth
                button.onDraw(
                    c,
                    RectF(
                        left,
                        itemView.top.toFloat(),
                        right,
                        itemView.bottom.toFloat()
                    ),
                    pos
                )
                right = left
            }
        }

        @SuppressLint("ClickableViewAccessibility")
        fun attachToRecyclerView(recyclerView: RecyclerView?) {
            this.recyclerView = recyclerView
            this.recyclerView!!.setOnTouchListener(onTouchListener)
            val itemTouchHelper = ItemTouchHelper(this)
            itemTouchHelper.attachToRecyclerView(this.recyclerView)
        }

        abstract fun instantiateUnderlayButton(
            viewHolder: RecyclerView.ViewHolder?,
            underlayButtons: MutableList<UnderlayButton>?,
        )

        interface UnderlayButtonClickListener {
            fun onClick(pos: Int)
        }

        class UnderlayButton(
            context: Context, private val text: String, private val color: Int, textSize: Float,
            private val clickListener: UnderlayButtonClickListener,
        ) {
            private val textSizeInPixel: Float =
                textSize * context.resources.displayMetrics.density // dp to px
            private var pos = 0
            private var clickRegion: RectF? = null
            fun onClick(x: Float, y: Float): Boolean {
                if (clickRegion != null && clickRegion!!.contains(x, y)) {
                    clickListener.onClick(pos)
                    return true
                }
                return false
            }

            fun onDraw(c: Canvas, rect: RectF, pos: Int) {
                val position = Paint()

                // Draw background
                position.color = color
                position.textSize = textSizeInPixel
                c.drawRect(rect, position)

                // Draw Text
                position.color = Color.WHITE
                position.typeface = Typeface.DEFAULT_BOLD
                val rects = Rect()
                val cHeight = rect.height()
                val cWidth = rect.width()
                position.textAlign = Paint.Align.LEFT
                position.getTextBounds(text, 0, text.length, rects)
                val xWidth = cWidth / 2f - rects.width() / 2f - rects.left
                val yHeight = cHeight / 2f + rects.height() / 2f - rects.bottom
                c.drawText(text, rect.left + xWidth, rect.top + yHeight, position)
                clickRegion = rect
                this.pos = pos
            }
        }

        companion object {
            const val BUTTON_WIDTH =   550
            const val BUTTON_HIGHT =   50
        }

        init {
            buttons = ArrayList()
            val gestureListener: GestureDetector.SimpleOnGestureListener = object : GestureDetector.SimpleOnGestureListener() {
                override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
                    for (button in buttons) {
                        if (button.onClick(e.x, e.y)) break
                    }
                    return true
                }
            }
            gestureDetector = GestureDetector(context, gestureListener)
            buttonsBuffer = HashMap()
            recoverQueue = object : LinkedList<Int>() {
                override fun add(element: Int): Boolean {
                    return if (contains(element)) false else super.add(element)
                }
            }
        }
    }