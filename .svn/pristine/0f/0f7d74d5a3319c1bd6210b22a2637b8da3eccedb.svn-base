package com.usend.database;

import android.database.Cursor;
import androidx.lifecycle.LiveData;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.SharedSQLiteStatement;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteQuery;
import androidx.sqlite.db.SupportSQLiteStatement;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

@SuppressWarnings({"unchecked", "deprecation"})
public final class AppDao_Impl extends AppDao {
  private final RoomDatabase __db;

  private final EntityInsertionAdapter __insertionAdapterOfUserBean;

  private final EntityDeletionOrUpdateAdapter __deletionAdapterOfUserBean;

  private final EntityDeletionOrUpdateAdapter __updateAdapterOfUserBean;

  private final SharedSQLiteStatement __preparedStmtOfDeleteAllBeans;

  public AppDao_Impl(RoomDatabase __db) {
    this.__db = __db;
    this.__insertionAdapterOfUserBean = new EntityInsertionAdapter<UserBean>(__db) {
      @Override
      public String createQuery() {
        return "INSERT OR REPLACE INTO `user_beans`(`id`,`name`,`age`,`birthDate`,`image`,`profession`) VALUES (nullif(?, 0),?,?,?,?,?)";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, UserBean value) {
        stmt.bindLong(1, value.getId());
        if (value.getName() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getName());
        }
        if (value.getAge() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getAge());
        }
        if (value.getBirthDate() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getBirthDate());
        }
        if (value.getImage() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getImage());
        }
        if (value.getProfession() == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindString(6, value.getProfession());
        }
      }
    };
    this.__deletionAdapterOfUserBean = new EntityDeletionOrUpdateAdapter<UserBean>(__db) {
      @Override
      public String createQuery() {
        return "DELETE FROM `user_beans` WHERE `id` = ?";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, UserBean value) {
        stmt.bindLong(1, value.getId());
      }
    };
    this.__updateAdapterOfUserBean = new EntityDeletionOrUpdateAdapter<UserBean>(__db) {
      @Override
      public String createQuery() {
        return "UPDATE OR ABORT `user_beans` SET `id` = ?,`name` = ?,`age` = ?,`birthDate` = ?,`image` = ?,`profession` = ? WHERE `id` = ?";
      }

      @Override
      public void bind(SupportSQLiteStatement stmt, UserBean value) {
        stmt.bindLong(1, value.getId());
        if (value.getName() == null) {
          stmt.bindNull(2);
        } else {
          stmt.bindString(2, value.getName());
        }
        if (value.getAge() == null) {
          stmt.bindNull(3);
        } else {
          stmt.bindString(3, value.getAge());
        }
        if (value.getBirthDate() == null) {
          stmt.bindNull(4);
        } else {
          stmt.bindString(4, value.getBirthDate());
        }
        if (value.getImage() == null) {
          stmt.bindNull(5);
        } else {
          stmt.bindString(5, value.getImage());
        }
        if (value.getProfession() == null) {
          stmt.bindNull(6);
        } else {
          stmt.bindString(6, value.getProfession());
        }
        stmt.bindLong(7, value.getId());
      }
    };
    this.__preparedStmtOfDeleteAllBeans = new SharedSQLiteStatement(__db) {
      @Override
      public String createQuery() {
        final String _query = "DELETE FROM user_beans";
        return _query;
      }
    };
  }

  @Override
  public long insertData(final UserBean entity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      long _result = __insertionAdapterOfUserBean.insertAndReturnId(entity);
      __db.setTransactionSuccessful();
      return _result;
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void insertData(final List<? extends UserBean> entity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __insertionAdapterOfUserBean.insert(entity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteData(final UserBean entity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __deletionAdapterOfUserBean.handle(entity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteData(final List<? extends UserBean> entity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __deletionAdapterOfUserBean.handleMultiple(entity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void updateData(final UserBean entity) {
    __db.assertNotSuspendingTransaction();
    __db.beginTransaction();
    try {
      __updateAdapterOfUserBean.handle(entity);
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
    }
  }

  @Override
  public void deleteAllBeans() {
    __db.assertNotSuspendingTransaction();
    final SupportSQLiteStatement _stmt = __preparedStmtOfDeleteAllBeans.acquire();
    __db.beginTransaction();
    try {
      _stmt.executeUpdateDelete();
      __db.setTransactionSuccessful();
    } finally {
      __db.endTransaction();
      __preparedStmtOfDeleteAllBeans.release(_stmt);
    }
  }

  @Override
  public LiveData<List<UserBean>> getAllBeans() {
    final String _sql = "SELECT * FROM user_beans";
    final RoomSQLiteQuery _statement = RoomSQLiteQuery.acquire(_sql, 0);
    return __db.getInvalidationTracker().createLiveData(new String[]{"user_beans"}, false, new Callable<List<UserBean>>() {
      @Override
      public List<UserBean> call() throws Exception {
        final Cursor _cursor = DBUtil.query(__db, _statement, false);
        try {
          final int _cursorIndexOfId = CursorUtil.getColumnIndexOrThrow(_cursor, "id");
          final int _cursorIndexOfName = CursorUtil.getColumnIndexOrThrow(_cursor, "name");
          final int _cursorIndexOfAge = CursorUtil.getColumnIndexOrThrow(_cursor, "age");
          final int _cursorIndexOfBirthDate = CursorUtil.getColumnIndexOrThrow(_cursor, "birthDate");
          final int _cursorIndexOfImage = CursorUtil.getColumnIndexOrThrow(_cursor, "image");
          final int _cursorIndexOfProfession = CursorUtil.getColumnIndexOrThrow(_cursor, "profession");
          final List<UserBean> _result = new ArrayList<UserBean>(_cursor.getCount());
          while(_cursor.moveToNext()) {
            final UserBean _item;
            final int _tmpId;
            _tmpId = _cursor.getInt(_cursorIndexOfId);
            final String _tmpName;
            _tmpName = _cursor.getString(_cursorIndexOfName);
            final String _tmpAge;
            _tmpAge = _cursor.getString(_cursorIndexOfAge);
            final String _tmpBirthDate;
            _tmpBirthDate = _cursor.getString(_cursorIndexOfBirthDate);
            final String _tmpImage;
            _tmpImage = _cursor.getString(_cursorIndexOfImage);
            final String _tmpProfession;
            _tmpProfession = _cursor.getString(_cursorIndexOfProfession);
            _item = new UserBean(_tmpId,_tmpName,_tmpAge,_tmpBirthDate,_tmpImage,_tmpProfession);
            _result.add(_item);
          }
          return _result;
        } finally {
          _cursor.close();
        }
      }

      @Override
      protected void finalize() {
        _statement.release();
      }
    });
  }

  @Override
  public List<UserBean> getAllData(final SupportSQLiteQuery query) {
    final SupportSQLiteQuery _internalQuery = query;
    __db.assertNotSuspendingTransaction();
    final Cursor _cursor = DBUtil.query(__db, _internalQuery, false);
    try {
      final List<UserBean> _result = new ArrayList<UserBean>(_cursor.getCount());
      while(_cursor.moveToNext()) {
        final UserBean _item;
        _item = __entityCursorConverter_comUsendDatabaseUserBean(_cursor);
        _result.add(_item);
      }
      return _result;
    } finally {
      _cursor.close();
    }
  }

  private UserBean __entityCursorConverter_comUsendDatabaseUserBean(Cursor cursor) {
    final UserBean _entity;
    final int _cursorIndexOfId = cursor.getColumnIndex("id");
    final int _cursorIndexOfName = cursor.getColumnIndex("name");
    final int _cursorIndexOfAge = cursor.getColumnIndex("age");
    final int _cursorIndexOfBirthDate = cursor.getColumnIndex("birthDate");
    final int _cursorIndexOfImage = cursor.getColumnIndex("image");
    final int _cursorIndexOfProfession = cursor.getColumnIndex("profession");
    final int _tmpId;
    if (_cursorIndexOfId == -1) {
      _tmpId = 0;
    } else {
      _tmpId = cursor.getInt(_cursorIndexOfId);
    }
    final String _tmpName;
    if (_cursorIndexOfName == -1) {
      _tmpName = null;
    } else {
      _tmpName = cursor.getString(_cursorIndexOfName);
    }
    final String _tmpAge;
    if (_cursorIndexOfAge == -1) {
      _tmpAge = null;
    } else {
      _tmpAge = cursor.getString(_cursorIndexOfAge);
    }
    final String _tmpBirthDate;
    if (_cursorIndexOfBirthDate == -1) {
      _tmpBirthDate = null;
    } else {
      _tmpBirthDate = cursor.getString(_cursorIndexOfBirthDate);
    }
    final String _tmpImage;
    if (_cursorIndexOfImage == -1) {
      _tmpImage = null;
    } else {
      _tmpImage = cursor.getString(_cursorIndexOfImage);
    }
    final String _tmpProfession;
    if (_cursorIndexOfProfession == -1) {
      _tmpProfession = null;
    } else {
      _tmpProfession = cursor.getString(_cursorIndexOfProfession);
    }
    _entity = new UserBean(_tmpId,_tmpName,_tmpAge,_tmpBirthDate,_tmpImage,_tmpProfession);
    return _entity;
  }
}
