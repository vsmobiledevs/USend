package com.usend.views.home

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.Observer
import com.base.network.BuildConfig
import com.base.network.model.*
import com.usend.R
import com.usend.R.style.sqipThemeCardEntry_add
import com.usend.adapter.SavedCardsItemAdapter
import com.usend.base.ViewModelActivity
import com.usend.comman.Resource
import com.usend.databinding.ActivitySavedCardsBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.utils.*
import com.usend.utils.CommonUtils.showAffirmationDialog
import com.usend.viewmodels.SavedCardsViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import sqip.Callback
import sqip.CardEntry
import sqip.CardEntry.DEFAULT_CARD_ENTRY_REQUEST_CODE
import sqip.CardEntry.handleActivityResult
import sqip.CardEntry.startCardEntryActivity
import sqip.CardEntryActivityCommand
import sqip.CardEntryActivityResult
import java.util.*
import kotlin.reflect.KClass


open class SavedCardsActivity(
    override val modelClass: KClass<SavedCardsViewModel> = SavedCardsViewModel::class,
    override val layoutId: Int = R.layout.activity_saved_cards
) : ViewModelActivity<ActivitySavedCardsBinding, SavedCardsViewModel>() {
    private var arrayList = arrayListOf<CardXX>()
    private val TAG = SavedCardsActivity::class.java.simpleName
    private var mPos: Int? = null
    private var mType: String? = null


    override fun initView() {
        super.initView()




        initToolbar(
            toolbar = toolbar,
            title = resources.getString(R.string.lbl_saved_payment_methods)
        )

        binding.rvSavedCards.addItemDecoration(
            ItemOffsetDecoration(
                resources.getDimensionPixelOffset(R.dimen.dimen_10dp), "top", pos = 1
            )
        )

    }


    fun SquareupPayment() {

        if (mType == ADD) {
            (this as AppCompatActivity).actionBar?.title = "Example 1"


            /* setTheme(sqipThemeCardEntry_add)*/
            /* val sample = TextView(ContextThemeWrapper(this, R.style.sqip_Theme_CardEntryAdd), null, 0)
              title= sample.toString()*/

        } else {
            (this as AppCompatActivity).actionBar?.title = "Example 1"
        }
        // val  DEFAULT_CARD_ENTRY_REQUEST_CODE=80
        startCardEntryActivity(
            this, true,
            DEFAULT_CARD_ENTRY_REQUEST_CODE
        );
        //CardEntry.bindViews()
        // CardEntryActivity.cardEntryLayout
        //CardEntryActivityCommand.card


        // sqip_Loading.Spinner.showAffirmationDialog()
    }


    //     override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
//        super.onActivityResult(requestCode, resultCode, data)
//        handleActivityResult(data,
//            object : Callback<CardEntryActivityResult> {
//                override fun onResult(result: CardEntryActivityResult) {
//                    if (cardEntryActivityResult.isSuccess()) {
//                        if (!ConfigHelper.serverHostSet()) {
//                            showServerHostNotSet()
//                        } else {
//                            showSuccessCharge()
//                        }
//                    } else if (cardEntryActivityResult.isCanceled()) {
//                        val res = resources
//                        val delayMs =
//                            res.getInteger(R.integer.card_entry_activity_animation_duration_ms)
//                        handler.postDelayed(Runnable { this.showOrderSheet() }, delayMs.toLong())
//                    }
//                }
//            })
//        if (requestCode == com.example.supercookie.CheckoutActivity.LOAD_PAYMENT_DATA_REQUEST_CODE) {
//            handleGooglePayActivityResult(resultCode, data)
//        }
//    }
    private fun ListCardData() {
        Log.e("tag", "msg")
        val squareUpToken: String
        if (BuildConfig.DEBUG) {
            squareUpToken = SQUARE_UP_TOKEN
        } else {
            squareUpToken = SQUARE_UP_TOKEN
        }
        val customerId = PreferenceHelper.getUserObject().customerId
        if (customerId != null) {
            viewModel.ListCardApiS(squareUpToken, customerId)
        }
    }

    override fun initControls() {
        super.initControls()
        ListCardData()
        // arrayList.clear()
//        arrayList.add(CardXX())


        /*  val swipeHelper: SwipeHelper = object : SwipeHelper(this@SavedCardsActivity) {
              override fun instantiateUnderlayButton(
                  viewHolder: RecyclerView.ViewHolder?, underlayButtons: MutableList<UnderlayButton>?,
              ) {
                  underlayButtons?.add(UnderlayButton(this@SavedCardsActivity,
                      getString(R.string.lbl_delete),
                      ContextCompat.getColor(applicationContext, R.color.colorRed), 13.0f,
                      object : UnderlayButtonClickListener {
                          override fun onClick(pos: Int) {
                              showAffirmationDialog(
                                  title = resources.getString(R.string.msg_are_you_sure_to_delete_card),
                                  btnText = resources.getString(R.string.lbl_yes),
                                  btnNegativeText = resources.getString(R.string.lbl_no),
                                          isCancelable=true,

                              )
                              {
                                  Log.e("tag",arrayList.get(pos).id.toString()+"  position"+arrayList.get(pos))
                                  viewModel.delete(arrayList.get(pos).id!!)
                                  arrayList.removeAt(pos)
                                  binding.adapter?.notifyItemRemoved(pos)
                              }

                          }
                      }
                  ))
                  underlayButtons?.add(UnderlayButton(this@SavedCardsActivity,
                      getString(R.string.lbl_update),
                      ContextCompat.getColor(applicationContext, R.color.color2D2D2D), 13.0f,
                      object : UnderlayButtonClickListener {
                          override fun onClick(pos: Int) {
                             // callback(pos, EDIT)

                              val intent = Intent()
                              intent.putExtra(CARD, arrayList.get(pos).id!!)
                              intent.putExtra(POSITION, mPos)
                              intent.putExtra(TYPE, EDIT_CARD)
                              setResult(RESULT_OK, intent)
                            //  finish()
                              SquareupPayment()
  //                            itemAdapter.removeItem(pos)
  //                            setSaleDetails()
                          }
                      }
                  ))
              }
          }*/
        // swipeHelper.attachToRecyclerView(binding.rvSavedCards)


        // viewModel.getStripeCardsApi()
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)

    }


    @SuppressLint("NotifyDataSetChanged")
    private val mObserver = Observer<Any> { response ->

        //   Log.e(TAG, "Message: ${response}")


        when (response) {
            is Resource.AddSquareupCard<*> -> {
                response.data as SquareUpCardList
                val first = CardXX()
                arrayList.clear()
                arrayList.add(first)
                arrayList.addAll(response.data.cards)

                if (arrayList != null) {
                    binding.adapter = SavedCardsItemAdapter(arrayList) { mPosition, type ->
                        mType = type
                        mPos = mPosition
                        when (type) {
                            ADD -> {
                                SquareupPayment()
//                    val intent = Intent(this, SquareUpActivity::class.java)
//                 startActivityForResult(intent, ADD_CARD)
                            }
                            DELETE -> {
                                viewModel.delete(arrayList.get(mPosition!!).id!!)
                                arrayList.removeAt(mPosition)
                                binding.adapter?.notifyItemRemoved(mPosition)
                            }
                            EDIT -> {
                                /* val intent = Intent(this, SquareUpActivity::class.java)
                                 startActivityForResult(intent, ADD_CARD)*/
                                SquareupPayment()
                                /* val intent = Intent(this, AddCardActivity::class.java)
                                 intent.putExtra(FROM, EDIT)
                                 intent.putExtra(POSITION, mPosition)
                       // intent.putExtra(CardXX, arrayList[mPosition])
                       startActivityForResult(intent, EDIT_CARD)*/
                            }
                        }
                    }
                    binding.adapter?.notifyDataSetChanged()
                }


            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {

                        showProgressDialog(this)

                    } else {
                        hideProgressDialog()
                    }
                }
            }

            is Resource.DeleteSquareupCard<*> -> {

                /*  CommonUtils.showOkCallBackDialog(
                      this,
                      title = "",
                      message = resources.getString(R.string.msg_card_deleted_sucessfully))*/
                showAffirmationDialog(
                    title = resources.getString(R.string.msg_card_deleted_sucessfully),
                    btnText = resources.getString(R.string.lbl_okay)
                )
                {
                    val intent = Intent()
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(TYPE, EDIT_CARD)
                    setResult(RESULT_OK, intent)
                    //finish()
                }
            }
            is Resource.UpdateSquareupCard<*> -> {
                response.data as SquareupCreateResponse
                arrayList.add(response.data.card)
                Log.e("res", "Message: ${arrayList.size}")

                binding.adapter?.notifyDataSetChanged()

                arrayList.removeAt(mPos!!)
                binding.adapter?.notifyItemRemoved(mPos!!)


                /*   CommonUtils.showOkCallBackDialog(
                       this,
                       title = "",
                       message = resources.getString(R.string.msg_card_updated_sucessfully))*/
                showAffirmationDialog(
                    title = resources.getString(R.string.msg_card_updated_sucessfully),
                    btnText = resources.getString(R.string.lbl_okay)
                )
                {
                    val intent = Intent()
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(TYPE, DELETE_CARD)
                    setResult(RESULT_OK, intent)
                    //finish()
                }
            }
            is Resource.AddUsendCard<*> -> {
                response.data as SquareupCreateResponse
                arrayList.add(response.data.card)
                Log.e("res", "Message: ${arrayList.size}")
                binding.adapter?.notifyDataSetChanged()
                showAffirmationDialog(
                    title = resources.getString(R.string.msg_card_added_sucessfully),
                    btnText = resources.getString(R.string.lbl_okay)
                )
                //btnNegativeText = resources.getString(R.string.lbl_no))
                {
                    val intent = Intent()
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(TYPE, ADD_CARD)
                    setResult(RESULT_OK, intent)
                }

            }

            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }


        }


    }


    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == Activity.RESULT_OK) {

            handleActivityResult(data,
                object : Callback<CardEntryActivityResult> {
                    override fun onResult(result: CardEntryActivityResult) {
                        val uuid = UUID.randomUUID().toString()
                        val cardholdername =
                            PreferenceHelper.getUserObject().firstName + " " + PreferenceHelper.getUserObject().lastName
                        val customerId = PreferenceHelper.getUserObject().customerId
                        if (result.isSuccess()) {
                            val card = result.getSuccessValue()
                            val cards = CreateCard.Cards(
                                cardholdername,
                                customerId,
                                card.card.expirationMonth,
                                card.card.expirationYear
                            )
                            val createCard = CreateCard(uuid, card.nonce, cards)
                            val squareUpToken: String
                            if (BuildConfig.DEBUG) {
                                squareUpToken = SQUARE_UP_TOKEN
                            } else {
                                squareUpToken = SQUARE_UP_TOKEN
                            }
                            if (mType == ADD) {
                                viewModel.addCardApiS(squareUpToken, createCard, mType!!)
                                Log.e(TAG, "card: " + mType)
                            } else {
                                viewModel.addCardApiS(
                                    squareUpToken,
                                    createCard,
                                    arrayList.get(mPos!!).id!!
                                )
                                Log.e(TAG, "card: " + arrayList.get(mPos!!).id!!)
                            }

                            // Toast(this@SavedCardsActivity).showCustomToast(ADD, this@SavedCardsActivity)

                            /*   arrayList.add(
                                   1, CardList(
                                       cardId = card.nonce,
                                       brand = card.card.brand.name,
                                       cardHolderName = card?.(cardHolderName),
                                       expiryMonth = card?.expiryMonth,
                                       expiryYear = card?.expiryYear,
                                       last4 = card?.last4
                                   )
                               )

                              */
                            /*  if (!ConfigHelper.serverHostSet()) {
                                  showServerHostNotSet()
                              } else {
                                  showSuccessCharge()
                              }*/
                        } else if (result.isCanceled()) {
                            /* JLog.e(TAG, "Message: ${result.data}")*/
                            showToast("Canceled")
                        }
                    }
                })

            var pos = -1
            var type = 0
            if (data != null) {
                if (data.hasExtra(POSITION)) {
                    pos = data.getIntExtra(POSITION, 0)
                    type = data.getIntExtra(TYPE, 0)
                }
            }
            Log.e("tag", "" + requestCode)

            when (requestCode) {


                /* ADD_CARD -> {

                     val card: Card? = data?.getParcelableExtra(CARD)

                     arrayList.add(
                         1, CardList(
                             cardId = card?.cardId,
                             brand = card?.brand,
                             cardHolderName = card?.cardHolderName,
                             expiryMonth = card?.expiryMonth,
                             expiryYear = card?.expiryYear,
                             last4 = card?.last4
                         )
                     )

                     binding.adapter?.notifyItemInserted(1)
                 }*/

                EDIT_CARD -> {

                    if (type == EDIT_CARD) {

                        val card: UpdateCard? = data?.getParcelableExtra(CARD)

                        arrayList[pos] = CardXX(
//                            cardId = card?.cardId,
//                            brand = card?.brand,
//                            cardHolderName = card?.cardHolderName,
//                            expiryMonth = card?.expiryMonth,
//                            expiryYear = card?.expiryYear,
//                            last4 = card?.last4
                        )

                        binding.adapter?.notifyItemChanged(pos)
                    } else if (type == DELETE_CARD) {
                        arrayList.removeAt(pos)

                        binding.adapter?.notifyItemRemoved(pos)
                    }
                }
            }
        }
    }

    /* override fun onRestoreInstanceState(savedInstanceState: Bundle) {
         super.onRestoreInstanceState(savedInstanceState)
         if (binding.adapter != null) {
             binding.adapter.restoreStates(savedInstanceState);
         }
     }*/

    override fun onResume() {
        binding.adapter?.notifyDataSetChanged()
        super.onResume()
    }


    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}