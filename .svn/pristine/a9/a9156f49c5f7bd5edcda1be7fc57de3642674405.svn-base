package com.usend.views.userauth

import android.content.Context
import android.content.Intent
import android.text.SpannableString
import android.text.SpannableStringBuilder
import android.text.method.LinkMovementMethod
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat
import androidx.lifecycle.Observer
import com.usend.BuildConfig
import com.usend.R
import com.usend.comman.Resource
import com.usend.base.ViewModelActivity
import com.usend.databinding.ActivitySignUpBinding
import com.usend.extensions.*
import com.usend.models.UserModel
import com.usend.utils.*
import com.usend.viewmodels.SignUpViewModel
import com.usend.views.home.WebViewActivity
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class SignUpActivity(
    override val modelClass: KClass<SignUpViewModel> = SignUpViewModel::class,
    override val layoutId: Int = R.layout.activity_sign_up
) : ViewModelActivity<ActivitySignUpBinding, SignUpViewModel>() {

    private val TAG = SignUpActivity::class.java.simpleName
    private var user: UserModel = UserModel()

    override fun initView() {
        super.initView()

        binding.viewModel = viewModel
        binding.signUpActivity = this
        initToolbar(toolbar = toolbar)
        createSpannableString()
        createSpannableStringForSignUp()

        if (BuildConfig.DEBUG) {
            viewModel.firstName.value = "Dip"
            viewModel.lastName.value = "Ramoliya"
            viewModel.email.value = "abc@gmail.com"
            viewModel.password.value = "123456@Aa"
            viewModel.re_password.value = "123456@Aa"
            viewModel.cbTermsAndPolicy.value = true
        }
    }

    override fun initControls() {
        super.initControls()

        binding.edtPassword.afterTextChanged {
            if (it.last().toString() == " ") {
                binding.edtPassword.setText(binding.edtPassword.text.toString().replace(" ", ""))
                binding.edtPassword.setSelection(binding.edtPassword.text!!.length)
            }
        }

        binding.edtRePassword.afterTextChanged {
            if (it.last().toString() == " ") {
                binding.edtRePassword.setText(binding.edtRePassword.text.toString().replace(" ", ""))
                binding.edtRePassword.setSelection(binding.edtRePassword.text!!.length)
            }
        }
    }

    fun onNextClick() {
        viewModel.signUp()
    }

    fun onSignInClick() {
        SignInActivity.newIntent(
            this, Intent(this, SignInActivity::class.java)
                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
                .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        )
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                user.firstName = viewModel.firstName.value
                user.lastName = viewModel.lastName.value
                user.email = viewModel.email.value
                user.password = viewModel.password.value

                BillingAddressActivity.newIntent(this, Intent(this, BillingAddressActivity::class.java).putExtra(USER_DATA, user))
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
        }
    }

    private fun createSpannableString() {

        val mainSSB = SpannableStringBuilder()
        val ss1 = SpannableString(resources.getString(R.string.lbl_i_agree))
        val ss2 = SpannableString(resources.getString(R.string.lbl_t_and_c))
        val ss3 = SpannableString(resources.getString(R.string.lbl_and))
        val ss4 = SpannableString(resources.getString(R.string.lbl_privacy_policy))

        ss2.setClickableSpan(
            0,
            ss2.length,
            ContextCompat.getColor(this, R.color.color154A99),
            ResourcesCompat.getFont(this, R.font.poppins_medium)!!,
            true,
            color(R.color.color154A99)
        ) {

            WebViewActivity.newIntent(
                this, Intent(this, WebViewActivity::class.java)
                    .putExtra(TITLE, resources.getString(R.string.lbl_t_and_c))
                    .putExtra(SLUG, "terms_and_conditions")
            )
        }

        ss4.setClickableSpan(
            0,
            ss4.length,
            ContextCompat.getColor(this, R.color.color154A99),
            ResourcesCompat.getFont(this, R.font.poppins_medium)!!,
            true,
            color(R.color.color154A99)
        ) {
            WebViewActivity.newIntent(
                this, Intent(this, WebViewActivity::class.java)
                    .putExtra(TITLE, resources.getString(R.string.lbl_privacy_policy))
                    .putExtra(SLUG, "privacy_policy")
            )
        }

        mainSSB.append(ss1)
        mainSSB.append(ss2)
        mainSSB.append(ss3)
        mainSSB.append(ss4)

        binding.txtTandC.text = mainSSB
        binding.txtTandC.movementMethod = LinkMovementMethod.getInstance()

    }

    private fun createSpannableStringForSignUp() {

        val mainSSB = SpannableStringBuilder()
        val ss1 = SpannableString(resources.getString(R.string.lbl_already_have_an_account))
        val ss2 = SpannableString(resources.getString(R.string.lbl_sign_in))

        ss2.setClickableSpan(
            0,
            ss2.length,
            ContextCompat.getColor(this, R.color.color154A99),
            ResourcesCompat.getFont(this, R.font.poppins_semibold)!!
        ) {

        }

        mainSSB.append(ss1)
        mainSSB.append(ss2)

        binding.txtAlreadyHaveAccount.text = mainSSB
        binding.txtAlreadyHaveAccount.movementMethod = LinkMovementMethod.getInstance()

    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}