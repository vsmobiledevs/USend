/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 https://www.spaceotechnologies.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

package com.usend.database

import android.content.Context
import android.os.Environment
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import com.usend.utils.DB_NAME
import com.usend.utils.FileUtil
import java.io.*
import java.nio.channels.FileChannel


@Database(entities = arrayOf(UserBean::class), version = 1, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {
    /*  In kotlin volatile and Synchronized are not available as keyword; are available
     *  instead as annotations
     */
    companion object {
        @Volatile
        private var instance: AppDatabase? = null

        fun getInstance(context: Context): AppDatabase? {
            try {


                if (instance == null) {
                    synchronized(AppDatabase) {
                        if (instance == null) {
                            instance = create(context)
                        }
                    }
                }
            } catch (e: Exception) {
                e.stackTrace
            }

            return instance
        }

        fun create(context: Context): AppDatabase {
            return Room.databaseBuilder(context, AppDatabase::class.java, DB_NAME)
                .allowMainThreadQueries()
                .fallbackToDestructiveMigration()
                .build()
        }
    }


    val MIGRATION_2_3: Migration = object : Migration(2, 3) {
        override fun migrate(database: SupportSQLiteDatabase) {
            database.execSQL("ALTER TABLE users ADD profession TEXT")
        }
    }

    //  Function to get instance of the DAO
    abstract fun getAppDao(): AppDao

    /*  Function to copy the defined db in assets to
     *  local storage
     */
    fun copyDatabaseFromAssets(mContext: Context): Boolean {
        val DB_PATH = "/data/data/" + mContext.packageName + "/databases/"
        val mDatabaseHelper = Databasehelper(mContext, DB_PATH)
        if (mDatabaseHelper.checkDataBase(DB_PATH)) {
            return true
        }
        val buffer = ByteArray(1024)
        val mOutputStream: OutputStream
        val mInputStream: InputStream
        var length = 0
        try {
            mInputStream = mContext.assets.open(DB_NAME)
            mOutputStream = FileOutputStream(DB_PATH + DB_NAME)
            while ({ length = mInputStream.read(buffer, 0, 1024);length }() > 0) {
                mOutputStream.write(buffer, 0, length)
            }
            mOutputStream.close()
            mOutputStream.flush()
            mInputStream.close()

        } catch (e: IOException) {
            e.printStackTrace()
        }
        return true
    }

    var DB_FILEPATH = "/data/user/0/com.blpchef.app/databases/DMG_273_v1.0.sqlite"

    /**
     * Copies the database file at the specified location over the current
     * internal application database.
     */
    @Throws(IOException::class)
    fun exportDB(fromFile: String, toFile: String): Boolean {

        // Close the SQLiteOpenHelper so it will commit the created empty
        // database to internal storage.
        close()
        val newDb = File(toFile + "/backupdb.sqlite")
        val oldDb = File(fromFile)
        if (oldDb.exists()) {
            FileUtil.copyFile(FileInputStream(oldDb), FileOutputStream(newDb))
            // Access the copied database so SQLiteHelper will cache it and mark
            // it as created.
            return true
        }
        return false
    }


    fun exportDB(context: Context) {
        val sd = Environment.getDataDirectory()
        var source: FileChannel? = null
        var destination: FileChannel? = null
        val currentDB = context.getDatabasePath(DB_NAME)
        val backupDB = File(context.filesDir.path.toString(), "backupdb.sqlite")
        try {
            source = FileInputStream(currentDB).channel
            destination = FileOutputStream(backupDB).channel
            destination.transferFrom(source, 0, source.size())
            source.close()
            destination.close()
        } catch (e: IOException) {
            e.printStackTrace()
        }

    }

}