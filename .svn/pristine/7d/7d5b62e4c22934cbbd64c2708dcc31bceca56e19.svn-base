package com.usend.views.home

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.view.View
import android.widget.RadioButton
import android.widget.RadioGroup
import androidx.appcompat.widget.AppCompatRadioButton
import androidx.lifecycle.Observer
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.base.network.model.CarrierList
import com.base.network.model.GetRatesList
import com.base.network.model.ListshippingCalculatorRates
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.usend.R
import com.usend.adapter.ShippingMethodFilterItemAdapter
import com.usend.adapter.ShippingMethodItemAdapter
import com.usend.base.ViewModelActivity
import com.usend.comman.Resource
import com.usend.databinding.ActivityShippingCostBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.models.ShippingCalculatorModel
import com.usend.utils.*
import com.usend.viewmodels.ShippingCostViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlinx.android.synthetic.main.app_toolbar.view.*
import kotlin.reflect.KClass

class ShippingCostActivity(
    override val modelClass: KClass<ShippingCostViewModel> = ShippingCostViewModel::class,
    override val layoutId: Int = R.layout.activity_shipping_cost
) : ViewModelActivity<ActivityShippingCostBinding,ShippingCostViewModel>() {
    private val TAG = ShippingCostActivity::class.java.simpleName
    private var arrayListShippingMethods = arrayListOf<GetRatesList>()
    private var carrierList = arrayListOf<CarrierList>()
    private var shippingCalModel : ShippingCalculatorModel? = null
    private var selectedFilterValue = arrayListOf<String>()
     private var carrierPosition:Int?=null

    override fun getDataFromIntent() {
        super.getDataFromIntent()
        if(intent.hasExtra(EXTRA_DATA))
        {
            //arrayListShippingMethods = intent.getParcelableArrayListExtra(EXTRA_DATA)!!
            carrierList = intent.getParcelableArrayListExtra(CARRIER_LIST)!!
            shippingCalModel = intent.getParcelableExtra(SHIPPING_CAL_MODEL)
            //carrierListMethod()
            /*carrierPosition=0
            carrierList.forEachIndexed { _, cl ->
                viewModel.getShippingMethods(
                    countryCodeId = shippingCalModel!!.countryCodeId,
                    city = shippingCalModel!!.city,
                    width = shippingCalModel!!.width.toDouble(),
                    length = shippingCalModel!!.length.toDouble(),
                    height = shippingCalModel!!.height.toDouble(),
                    weight = shippingCalModel!!.weight.toDouble(),
                    dimensonSelected = shippingCalModel!!.dimensionUnit,
                    weightSelected = shippingCalModel!!.weight_unit,
                    zipCode = shippingCalModel!!.zipcode,
                    carrierCode = selectedFilterValue.joinToString(separator = ","),
                    priceFilter = if(viewModel.selectedPriceFilter.value!! == resources.getString(R.string.lbl_high_to_low)) HIGH_TO_LOW else LOW_TO_HIGH,
                    singleCarrierCode = cl.code!!
                )
            }*/
        }
    }

    override fun initView() {
        super.initView()

        initToolbar(
            toolbar = toolbar,
            title = resources.getString(R.string.lbl_shipping_cost),
            isRightTextVisible = true,
            rightButtonText = resources.getString(R.string.lbl_sort_by)
        )

        selectedFilterValue.add("")

        binding.toolbarShippingCost.txtRightButton.setOnClickListener {
            openSortByDialog()
        }

        binding.rvShippingCost.adapter = ShippingMethodItemAdapter(arrayListShippingMethods)
        {

        }
        if(arrayListShippingMethods.size > 0)
        {

        }

        binding.rvShippingCostFilter.addItemDecoration(
            ItemOffsetDecoration(
                resources.getDimension(
                    R.dimen.dimen_20dp
                ).toInt(), "left"
            )
        )

        binding.isEmpty = arrayListShippingMethods.size == 0

        binding.rvShippingCostFilter.layoutManager =
            LinearLayoutManager(this, RecyclerView.HORIZONTAL, false)
        binding.rvShippingCostFilter.adapter = ShippingMethodFilterItemAdapter(carrierList) { it ->

            arrayListShippingMethods.clear()
           // binding.rvShippingCostFilter.invalidate();
            selectedFilterValue.clear()
            selectedFilterValue.add(carrierList[it].code!!)
            carrierPosition=it
            if (it==0){
                carrierList.forEachIndexed { _, cl ->
                    viewModel.getShippingMethods(
                        countryCodeId = shippingCalModel!!.countryCodeId,
                        city = shippingCalModel!!.city,
                        width = shippingCalModel!!.width.toDouble(),
                        length = shippingCalModel!!.length.toDouble(),
                        height = shippingCalModel!!.height.toDouble(),
                        weight = shippingCalModel!!.weight.toDouble(),
                        dimensonSelected = shippingCalModel!!.dimensionUnit,
                        weightSelected = shippingCalModel!!.weight_unit,
                        zipCode = shippingCalModel!!.zipcode,
                        carrierCode = selectedFilterValue.joinToString(separator = ","),
                        priceFilter = if(viewModel.selectedPriceFilter.value!! == resources.getString(R.string.lbl_high_to_low)) HIGH_TO_LOW else LOW_TO_HIGH,
                        singleCarrierCode = cl.code!!
                    )
                }
            }else{
               /* viewModel.getShippingMethods(
                    countryCodeId = shippingCalModel!!.countryCodeId,
                    city = shippingCalModel!!.city,
                    width = shippingCalModel!!.width.toDouble(),
                    length = shippingCalModel!!.length.toDouble(),
                    height = shippingCalModel!!.height.toDouble(),
                    weight = shippingCalModel!!.weight.toDouble(),
                    dimensonSelected = shippingCalModel!!.dimensionUnit,
                    weightSelected = shippingCalModel!!.weight_unit,
                    zipCode = shippingCalModel!!.zipcode,
                    carrierCode = selectedFilterValue.joinToString(separator = ","),
                    priceFilter = if(viewModel.selectedPriceFilter.value!! == resources.getString(R.string.lbl_high_to_low)) HIGH_TO_LOW else LOW_TO_HIGH,
                    singleCarrierCode = carrierList[it].code!!
                )*/
                val list=arrayListShippingMethods.filter {
                    it.carrierCode==carrierList[carrierPosition!!].code
                }

                arrayListShippingMethods.addAll(list)
                binding.rvShippingCost.adapter?.notifyDataSetChanged()

            }


        }
    }


    private fun openSortByDialog() {
        val mBottomSheetDialog = BottomSheetDialog(this, R.style.CustomBottomSheetDialogTheme)
        val sheetView: View =
            layoutInflater.inflate(R.layout.bottomsheet_shippingmethod_filter, null)
        mBottomSheetDialog.setContentView(sheetView)
        mBottomSheetDialog.show()

        if (viewModel.selectedPriceFilter.value!! == resources.getString(R.string.lbl_high_to_low)) {
            sheetView.findViewById<AppCompatRadioButton>(R.id.rbHighToLow).isChecked = true
        } else {
            sheetView.findViewById<AppCompatRadioButton>(R.id.rbLowToHigh).isChecked = true
        }

        val rg: RadioGroup = sheetView.findViewById(R.id.radioGroup)

        rg.setOnCheckedChangeListener { _, checkedId ->

            val rb = sheetView.findViewById<RadioButton>(checkedId)
            viewModel.selectedPriceFilter.value = rb.text.toString()
            mBottomSheetDialog.dismiss()

            viewModel.getShippingMethods(
                countryCodeId = shippingCalModel!!.countryCodeId,
                city = shippingCalModel!!.city,
                width = shippingCalModel!!.width.toDouble(),
                length = shippingCalModel!!.length.toDouble(),
                height = shippingCalModel!!.height.toDouble(),
                weight = shippingCalModel!!.weight.toDouble(),
                dimensonSelected = shippingCalModel!!.dimensionUnit,
                weightSelected = shippingCalModel!!.weight_unit,
                zipCode = shippingCalModel!!.zipcode,
                carrierCode = selectedFilterValue.joinToString(separator = ","),
                priceFilter = if(viewModel.selectedPriceFilter.value!! == resources.getString(R.string.lbl_high_to_low)) HIGH_TO_LOW else LOW_TO_HIGH,
                singleCarrierCode = "")
        }

    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    @SuppressLint("NotifyDataSetChanged")
    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {
                 if (carrierPosition==0)
                 {
                     JLog.e(TAG, "Message: ${response.data}")
                    // showToast(this, response.message.toString())
                 }
                 else
                 {
                     JLog.e(TAG, "Message: ${response.data}")
                     showToast(this, response.message.toString())
                     arrayListShippingMethods.clear()
                     binding.rvShippingCost.adapter?.notifyDataSetChanged()
                 }

            }
            is Resource.Success<*> -> {

                response.data as ListshippingCalculatorRates
              //  arrayListShippingMethods.clear()
                arrayListShippingMethods.addAll(response.data.responseData?.shippingCalculatorRates!!)
               // binding.shimmerLayout.stopShimmer()
                binding.rvShippingCost.setVisibility(View.VISIBLE)
                binding.rvShippingCost.adapter?.notifyDataSetChanged()
                binding.linhishide.visibility=View.GONE


                binding.simmerLayout.setVisibility(View.GONE)

            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        binding.simmerLayout.startShimmer()
                        binding.simmerLayout.setVisibility(View.VISIBLE)
                        binding.rvShippingCost.setVisibility(View.GONE)
                        //showProgressDialog(this)
                    } else {
                        binding.simmerLayout.setVisibility(View.GONE)
                        binding.rvShippingCost.setVisibility(View.VISIBLE)
                        binding.simmerLayout.stopShimmer()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(this, resources.getString(response.id.nullSafe()))
            }
            is Resource.ItemsNotFound<*> -> {
                showToast(response.message.toString())
                binding.isEmpty = true
                binding.linhishide.visibility=View.VISIBLE
                arrayListShippingMethods.clear()
                binding.rvShippingCost.adapter?.notifyDataSetChanged()
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    override fun initControls()  {
        super.initControls()
    }
    override fun onResume() {
        //binding.shimmerLayout.startShimmer()
        super.onResume()
    }

    override fun onPause() {
      //  binding.shimmerLayout.setVisibility(View.GONE)
        super.onPause()
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}