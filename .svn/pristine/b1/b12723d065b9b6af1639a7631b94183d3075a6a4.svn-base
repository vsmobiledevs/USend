package com.usend.views.userauth

import android.content.Context
import android.content.Intent
import android.text.Editable
import android.text.TextUtils
import android.text.TextWatcher
import androidx.lifecycle.Observer
import com.base.network.model.SignUpReponse
import com.usend.BuildConfig
import com.usend.R
import com.usend.comman.Resource
import com.usend.base.ViewModelActivity
import com.usend.databinding.ActivityPaymentInfoBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.models.UserModel
import com.usend.utils.*
import com.usend.utils.PreferenceHelper.set
import com.usend.viewmodels.PaymentInfoViewModel
import com.usend.views.MainActivity
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class PaymentInfoActivity(
    override val modelClass: KClass<PaymentInfoViewModel> = PaymentInfoViewModel::class,
    override val layoutId: Int = R.layout.activity_payment_info
) : ViewModelActivity<ActivityPaymentInfoBinding, PaymentInfoViewModel>() {

    private val TAG = PaymentInfoActivity::class.java.simpleName
    private var user: UserModel? = null

    override fun getDataFromIntent() {
        super.getDataFromIntent()

        if(intent.hasExtra(USER_DATA))
        {
            user = intent.getParcelableExtra(USER_DATA)
            viewModel.user = user!!
        }
    }

    override fun initView() {
        super.initView()

        binding.viewModel = viewModel
        binding.paymentActivity = this
        initToolbar(toolbar = toolbar)

        if (BuildConfig.DEBUG) {
            viewModel.cardNumber.value = "0123 4567 8901 2345"
            viewModel.cardName.value = "Dip Ramoliya"
            viewModel.month.value = "11"
            viewModel.year.value = "2020"
            viewModel.cvv.value = "123"
        }

    }

    override fun initControls() {
        super.initControls()

        binding.edtCardNumber.addTextChangedListener(object : TextWatcher {
            private val space : Char = ' '
            override fun afterTextChanged(s: Editable?) {
                // Remove spacing char

                if (s!!.isNotEmpty() && s.length % 5 === 0) {
                    val c: Char = s.get(s.length - 1)
                    if (space == c) {
                        s.delete(s.length - 1, s.length)
                    }
                }
                // Insert char where needed.
                // Insert char where needed.
                if (s.isNotEmpty() && s.length % 5 == 0) {
                    val c: Char = s.get(s.length - 1)
                    // Only if its a digit where there should be a space we insert a space
                    if (Character.isDigit(c) && TextUtils.split(s.toString(), space.toString()).size <= 3)
                    {
                        s.insert(s.length - 1, java.lang.String.valueOf(space))
                    }
                }
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
            }

        })
    }

    fun onSubmitClick(){

        viewModel.submit()
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                response.data as SignUpReponse
                PreferenceHelper.saveObject(USER_DATA, response.data?.responseData?.user)
                prefs[AUTH_KEY] = (response.data).responseData?.user?.authenticationToken
                prefs[IS_LOGIN] = true
                MainActivity.newIntent(this, Intent(this, MainActivity::class.java)
                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
                    .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
                    .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP))
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
        }
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }

}