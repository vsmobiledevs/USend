package com.usend.views.userauth

import android.content.Context
import android.content.Intent
import android.text.SpannableString
import android.text.SpannableStringBuilder
import android.text.method.LinkMovementMethod
import androidx.core.content.ContextCompat
import androidx.core.content.res.ResourcesCompat
import androidx.lifecycle.Observer
import com.base.network.model.SignUpReponse
import com.usend.BuildConfig
import com.usend.R
import com.usend.comman.Resource
import com.usend.base.ViewModelActivity
import com.usend.databinding.ActivitySignInBinding
import com.usend.extensions.afterTextChanged
import com.usend.extensions.nullSafe
import com.usend.extensions.setClickableSpan
import com.usend.extensions.showToast
import com.usend.utils.*
import com.usend.utils.CommonUtils.showOkDialog
import com.usend.viewmodels.SignInViewModel
import com.usend.views.MainActivity
import com.usend.utils.PreferenceHelper.set
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class SignInActivity(
    override val modelClass: KClass<SignInViewModel> = SignInViewModel::class,
    override val layoutId: Int = R.layout.activity_sign_in
) : ViewModelActivity<ActivitySignInBinding, SignInViewModel>() {

    private val TAG = SignInActivity::class.java.simpleName

    override fun initView() {
        super.initView()

        initToolbar(toolbar = toolbar, title = "")
        createSpannableString()
        binding.viewModel = viewModel
        binding.signInActivity = this

        if (BuildConfig.DEBUG) {
            viewModel.email.value = "dipr.spaceo@gmail.com"
            viewModel.password.value = "123456@Aa"
        }
    }

    override fun initControls() {
        super.initControls()

        binding.edtPassword.afterTextChanged {

            if (it.last().toString() == " ") {
                binding.edtPassword.setText(binding.edtPassword.text.toString().replace(" ", ""))
                binding.edtPassword.setSelection(binding.edtPassword.text!!.length)
            }
        }
    }

    fun onForgotPassClick()
    {
        ForgotPasswordActivity.newIntent(this, Intent(this, ForgotPasswordActivity::class.java))
    }

    fun onSignInClick()
    {
        viewModel.signIn()
    }

    fun onSignUpClick()
    {
        SignUpActivity.newIntent(this, Intent(this, SignUpActivity::class.java)
            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
            .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
            .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        )
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                response.data as SignUpReponse
                PreferenceHelper.saveObject(USER_DATA, response.data?.responseData?.user)
                prefs[AUTH_KEY] = (response.data).responseData?.user?.authenticationToken
                prefs[IS_SUBSCRIPTION] = (response.data).responseData?.user?.isSubscription

                if(response.data?.responseData?.user?.isMobileVerified.nullSafe())
                {
                    prefs[IS_LOGIN] = true
                    MainActivity.newIntent(this, Intent(this, MainActivity::class.java)
                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                        .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
                        .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
                        .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP))
                }
                else
                {
                    OtpVerificationActivity.newIntent(this, Intent(this, OtpVerificationActivity::class.java))
                }
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
        }
    }

    private fun createSpannableString() {

        val mainSSB = SpannableStringBuilder()
        val ss1 = SpannableString(resources.getString(R.string.lbl_dont_have_account))
        val ss2 = SpannableString(resources.getString(R.string.lbl_sign_up))

        ss2.setClickableSpan(
            0,
            ss2.length,
            ContextCompat.getColor(this, R.color.color154A99),
            ResourcesCompat.getFont(this, R.font.poppins_semibold)!!
        ) {

        }
        mainSSB.append(ss1)
        mainSSB.append(ss2)

        binding.txtDontHaveAccount.text = mainSSB
        binding.txtDontHaveAccount.movementMethod = LinkMovementMethod.getInstance()

    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}