package com.usend.viewmodels

import android.app.Application
import android.content.Context
import androidx.lifecycle.MediatorLiveData
import com.usend.R
import com.usend.base.BaseViewModel
import com.usend.comman.Resource
import com.usend.extensions.callApi
import com.usend.extensions.checkInternetConnected
import com.usend.repository.ApiServices
import com.usend.repository.UserRepository

class ShipToAddressViewModel(
    var myApplication: Application,
    private var repository: UserRepository
) :
    BaseViewModel(myApplication) {

    val mContext: Context = myApplication.applicationContext

    val status: MediatorLiveData<Any> by lazy {
        MediatorLiveData<Any>()
    }

    fun getShipToAddressList() {
        when {
            !mContext.checkInternetConnected() -> status.value =
                Resource.NoInternetError<Int>(R.string.default_internet_message)
            else -> {
                status.addSource(repository.getShipToAddressList(getAuthKey())) {

                    if (it is Resource.Success<*>) {
                        //can save for further use

                    }

                    status.value = it
                }
            }
        }
    }

    fun delete(id: Int) {
        when {
            !mContext.checkInternetConnected() -> status.value =
                Resource.NoInternetError<Int>(R.string.default_internet_message)
            else -> {
                status.addSource(repository.deleteShippingAddress(getAuthKey(), id = id)) {

                    if (it is Resource.Success<*>) {
                        //can save for further use

                    }

                    status.value = it
                }
            }
        }
    }

    fun updateAutoShipment(addressId: Int?=null) {
        myApplication.callApi(
            ApiServices.getAutoShipmentApiService().updateAutoShipment(
                authorization = getAuthKey(),
                addressId = addressId,
                autoShipmentServiceId = null,
                paymentDetailId = null
            ), liveData = status,
            showLoading = true
        )
    }
}