package com.usend.views.home

import android.content.Context
import android.content.Intent
import android.view.View
import androidx.core.content.ContextCompat
import androidx.lifecycle.Observer
import com.base.network.model.*
import com.hbb20.CountryCodePicker
import com.usend.R
import com.usend.comman.Resource
import com.usend.base.ViewModelActivity
import com.usend.databinding.ActivityAddNewAddressBinding
import com.usend.extensions.gone
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.utils.*
import com.usend.utils.CommonUtils.showAffirmationDialog
import com.usend.utils.CommonUtils.showOkCallBackDialog
import com.usend.viewmodels.AddNewAddressViewModel
import com.usend.views.userauth.RegionSelectionActivity
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class AddNewAddressActivity(
    override val modelClass: KClass<AddNewAddressViewModel> = AddNewAddressViewModel::class,
    override val layoutId: Int = R.layout.activity_add_new_address
) : ViewModelActivity<ActivityAddNewAddressBinding, AddNewAddressViewModel>() {

    private val TAG = AddNewAddressActivity::class.java.simpleName

    private var ccp : CountryCodePicker? = null
    private var from : String? = null

    private var countryList = arrayListOf<CountryList>()
    private var stateList = arrayListOf<StateList>()

    private var address : AddressList? = null
    private var mPos : Int? = null

    override fun getDataFromIntent() {
        super.getDataFromIntent()

        if(intent.hasExtra(FROM))
        {
            from = intent.getStringExtra(FROM)
        }

        if(from == EDIT){

            if(intent.hasExtra(ADDRESS))
            {
                address = intent.getParcelableExtra(ADDRESS)
            }

            if(intent.hasExtra(POSITION))
            {
                mPos = intent.getIntExtra(POSITION,0)
            }
        }
    }

    override fun initView() {
        super.initView()

        ccp = CountryCodePicker(this)
        binding.viewModel = viewModel
        binding.activity = this

        viewModel.getCountryList()
        viewModel.getStateList()

        if(from == ADD)
        {
            initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_add_new_address))
            binding.btnDelete.visibility = View.GONE
        }
        else
        {
            initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_edit_address))
            binding.btnAdd.text = resources.getString(R.string.lbl_update)
            binding.llSameAsBillingAddress.gone()
            binding.view1.gone()

            binding.edtLabel.setText(address?.label)
            viewModel.label.value = address?.label
            viewModel.receiverName.value = address?.receiverName
            viewModel.addressLine1.value = address?.street1
            viewModel.addressLine2.value = address?.street2
            viewModel.country.value = address?.country
            viewModel.state.value = address?.state
            viewModel.city.value = address?.city
            viewModel.zipcode.value = address?.postalCode
            viewModel.countryCode.value = address?.phoneCode
            viewModel.phoneNumber.value = address?.phone
            viewModel.countryCodeId.value = address?.countryCodeId
            binding.btnDelete.visibility = View.VISIBLE
        }
    }

    override fun initControls() {
        super.initControls()

        binding.llSameAsBillingAddress.setOnClickListener {

            if(!viewModel.cbSameAsBilling.value!!)
            {
                showAffirmationDialog(
                    title = resources.getString(R.string.msg_are_you_sure_billing_address),
                    btnText = resources.getString(R.string.lbl_yes),
                    btnNegativeText = resources.getString(R.string.lbl_no)
                )
                {
                    viewModel.cbSameAsBilling.value = true

                    var user : User = PreferenceHelper.getUserObject()

                    binding.edtAddressLine1.setText(user.street1)
                    binding.edtAddressLine2.setText(user.street2)
                    binding.edtCountry.setText(user.country)
                    binding.edtZipCode.setText(user.postalCode)
                    binding.edtState.setText(user.state)
                    binding.edtCity.setText(user.city)
                    binding.edtCountryCode.setText(user.phoneCode)
                    binding.edtPhone.setText(user.phone)
                    viewModel.countryCodeId.value = user.countryCodeId
                }
            }
            else
            {
                viewModel.cbSameAsBilling.value = false

                binding.edtAddressLine1.setText("")
                binding.edtAddressLine2.setText("")
                binding.edtCountry.setText("")
                binding.edtZipCode.setText("")
                binding.edtState.setText("")
                binding.edtCity.setText("")
                binding.edtCountryCode.setText("")
                binding.edtPhone.setText("")
            }
        }
    }

    fun onAddClick() {

        if (from == ADD) {
            viewModel.add()
        }
        else
        {
            viewModel.update(address?.id.nullSafe())
        }
    }

    fun onDeleteClick()
    {
       showAffirmationDialog(title = resources.getString(R.string.msg_are_you_sure_), btnText = resources.getString(R.string.lbl_yes), btnNegativeText = resources.getString(R.string.lbl_no))
        {
            viewModel.delete(address?.id.nullSafe())
        }
    }

    fun onCountryClick()
    {
        val arrayList = arrayListOf<String>()

        countryList.forEachIndexed { index, countryList ->

            arrayList.add(countryList.name.nullSafe())
        }

        val intent = Intent(this, RegionSelectionActivity::class.java)
            .putExtra(EXTRA_DATA, CODE_COUNTRY)
            .putExtra(TITLE, resources.getString(R.string.lbl_country))
            .putStringArrayListExtra(LIST,arrayList)

        startActivityForResult(intent, CODE_COUNTRY)
    }

    fun onStateClick()
    {
        val intent = Intent(this, RegionSelectionActivity::class.java)
            .putExtra(EXTRA_DATA, CODE_STATE)
            .putExtra(TITLE, resources.getString(R.string.lbl_state))

        startActivityForResult(intent, CODE_STATE)
    }

    fun onCityClick()
    {
        val intent = Intent(this, RegionSelectionActivity::class.java)
            .putExtra(EXTRA_DATA, CODE_CITY)
            .putExtra(TITLE, resources.getString(R.string.lbl_city))

        startActivityForResult(intent, CODE_CITY)
    }

    fun openCountryCodePicker()
    {
        ccp?.launchCountrySelectionDialog()

        ccp?.setOnCountryChangeListener {
            viewModel.countryCode.value = ccp?.selectedCountryCodeWithPlus
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if(resultCode == RESULT_OK)
        {
            val selected_item = data?.getStringExtra(SELECTED_DATA)

            when (requestCode) {
                CODE_COUNTRY -> {
                    binding.edtCountry.setText(selected_item)

                    val country = countryList.find { it.name == selected_item }
                    val countryCode = country?.phoneCode

                    binding.edtCountryCode.setText(countryCode)
                    viewModel.countryCodeId.value = country?.id!!

                    if (country?.id == UNITED_STATES_CODE && stateList.size > 0) {

                        binding.edtState.setText("")

                        binding.edtState.setCompoundDrawablesWithIntrinsicBounds(
                            null,
                            null,
                            ContextCompat.getDrawable(this, R.drawable.ic_drop_down_arrow),
                            null
                        )

                        binding.edtState.isFocusable = false
                        binding.edtState.hint = resources.getString(R.string.lbl_select)

                        binding.edtState.setOnClickListener {

                            val arrayList = arrayListOf<String>()

                            stateList.forEachIndexed { index, countryList ->

                                arrayList.add(countryList.name.nullSafe())
                            }

                            val intent = Intent(this, RegionSelectionActivity::class.java)
                                .putExtra(EXTRA_DATA, CODE_STATE)
                                .putExtra(TITLE, resources.getString(R.string.lbl_state))
                                .putStringArrayListExtra(LIST, arrayList)
                            startActivityForResult(intent, CODE_STATE)
                        }
                    } else {
                        binding.edtState.setText("")
                        binding.edtState.hint = resources.getString(R.string.lbl_enter_state)
                        binding.edtState.setCompoundDrawablesWithIntrinsicBounds(
                            null,
                            null,
                            null,
                            null
                        )
                        binding.edtState.isFocusable = true
                        binding.edtState.isFocusableInTouchMode = true

                        binding.edtState.setOnClickListener(null)
                    }
                }
                CODE_STATE -> {
                    binding.edtState.setText(selected_item)
                }
                CODE_CITY -> {
                    binding.edtCity.setText(selected_item)
                }
            }
        }
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                response.data as CreateAddressResponse

                showOkCallBackDialog(this, title = "", message = resources.getString(R.string.msg_address_added_sucessfully)) {

                    val intent = Intent()
                    intent.putExtra(ADDRESS, response.data.responseData?.address)
                    intent.putExtra(TYPE, ADD_ADDRESS)
                    setResult(RESULT_OK, intent)
                    finish()

                }
            }
            is Resource.DeleteAddressSuccess<*> -> {

                showOkCallBackDialog(this, title = "", message = resources.getString(R.string.msg_address_deleted_sucessfully)){

                    val intent = Intent()
                    intent.putExtra(POSITION,mPos)
                    intent.putExtra(TYPE, DELETE_ADDRESS)
                    setResult(RESULT_OK, intent)
                    finish()
                }
            }
            is Resource.EditAddressSuccess<*> -> {

                response.data as EditShippingAddressReponse

                showOkCallBackDialog(this, title = "", message = resources.getString(R.string.msg_address_updated_sucessfully)){

                    val intent = Intent()
                    intent.putExtra(ADDRESS, response.data.responseData?.address)
                    intent.putExtra(POSITION,mPos)
                    intent.putExtra(TYPE, EDIT_ADDRESS)
                    setResult(RESULT_OK, intent)
                    finish()
                }
            }
            is Resource.GetCountryListSucess<*>  -> {

                response.data as GetCountryResponse

                countryList.addAll(response.data.responseData?.country!!)

            }
            is Resource.GetStateListSucess<*> -> {

                response.data as GetUSAStateList

                stateList.addAll(response.data?.responseData?.usaStateList!!)

                if (address?.countryCodeId == UNITED_STATES_CODE && stateList.size > 0 && from == EDIT) {

                    binding.edtState.setCompoundDrawablesWithIntrinsicBounds(
                        null,
                        null,
                        ContextCompat.getDrawable(this, R.drawable.ic_drop_down_arrow),
                        null
                    )

                    binding.edtState.isFocusable = false

                    binding.edtState.setOnClickListener {

                        val arrayList = arrayListOf<String>()

                        stateList.forEachIndexed { index, countryList ->

                            arrayList.add(countryList.name.nullSafe())
                        }

                        val intent = Intent(this, RegionSelectionActivity::class.java)
                            .putExtra(EXTRA_DATA, CODE_STATE)
                            .putExtra(TITLE, resources.getString(R.string.lbl_state))
                            .putStringArrayListExtra(LIST, arrayList)
                        startActivityForResult(intent, CODE_STATE)
                    }
                }

            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}