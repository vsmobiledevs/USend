package com.usend.views.home

import android.content.Context
import android.content.Intent
import android.text.Editable
import android.text.TextUtils
import android.text.TextWatcher
import android.view.View
import androidx.core.content.ContextCompat
import androidx.lifecycle.Observer
import com.base.network.model.AddStripeCardResponse
import com.base.network.model.CardList
import com.base.network.model.StripeCardUpdateResponse
import com.stripe.android.ApiResultCallback
import com.stripe.android.Stripe
import com.stripe.android.exception.CardException
import com.stripe.android.model.CardParams
import com.stripe.android.model.Source
import com.stripe.android.model.SourceParams
import com.stripe.android.model.Token
import com.usend.R
import com.usend.base.ViewModelActivity
import com.usend.comman.Resource
import com.usend.databinding.ActivityAddCardBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.models.CardType
import com.usend.utils.*
import com.usend.utils.CommonUtils.dpToPx
import com.usend.utils.CommonUtils.showAffirmationDialog
import com.usend.viewmodels.AddCardViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class AddCardActivity(
    override val modelClass: KClass<AddCardViewModel> = AddCardViewModel::class,
    override val layoutId: Int = R.layout.activity_add_card
) : ViewModelActivity<ActivityAddCardBinding, AddCardViewModel>() {

    private val TAG = AddCardActivity::class.java.simpleName
    private var from: String? = null
    private var card: CardList? = null
    private var mPos: Int? = null

    override fun getDataFromIntent() {
        super.getDataFromIntent()

        if (intent.hasExtra(FROM)) {
            from = intent.getStringExtra(FROM)
        }

        if (from == EDIT) {

            if (intent.hasExtra(CARD)) {
                card = intent.getParcelableExtra(CARD)
            }

            if (intent.hasExtra(POSITION)) {
                mPos = intent.getIntExtra(POSITION, 0)
            }
        } else {
            binding.edtCardNumber.compoundDrawablePadding = dpToPx(this@AddCardActivity, 5)
            binding.edtCardNumber.setCompoundDrawablesRelativeWithIntrinsicBounds(
                ContextCompat.getDrawable(
                    this@AddCardActivity,
                    CardType.UNKNOWN.frontResource
                ), null, null, null
            )
        }
    }

    override fun initView() {
        super.initView()

        if (from == ADD) {
            initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_add_card))
            binding.btnDelete.visibility = View.GONE

        } else {
            initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_edit_card))
            binding.btnSave.text = resources.getString(R.string.lbl_update)
            viewModel.cardName.value = card?.cardHolderName
            viewModel.cardNumber.value = "**** **** **** " + card?.last4
            viewModel.month.value = card?.expiryMonth.toString()
            viewModel.year.value = ((card?.expiryYear ?: 0) % 100).toString()
            viewModel.cvv.value = "***"
            binding.edtCVV.isEnabled = false
            binding.edtCVV.isFocusable = false
            binding.edtCardNumber.isFocusable = false
            binding.edtCardNumber.isEnabled = false
            binding.btnDelete.visibility = View.VISIBLE
            binding.btnSave.text = resources.getString(R.string.lbl_update)
            binding.edtCVV.setText("***")
            binding.edtCVV.setTextColor(ContextCompat.getColor(this, R.color.color802D2D2D))
            binding.edtCardNumber.setTextColor(ContextCompat.getColor(this, R.color.color802D2D2D))
        }

        binding.viewModel = viewModel
    }

    override fun initControls() {
        super.initControls()

        binding.btnSave.setOnClickListener {

            if (from == ADD) {
                viewModel.add()
            } else {
                viewModel.updateCardApi(
                    card_id = card?.cardId.nullSafe(),
                    card_name = card?.cardHolderName.nullSafe(),
                    exp_month = viewModel.month.value!!,
                    exp_year = viewModel.getYearValue()
                )
            }
        }

        binding.btnDelete.setOnClickListener {

            showAffirmationDialog(
                title = resources.getString(R.string.msg_are_you_sure_to_delete_card),
                btnText = resources.getString(
                    R.string.lbl_yes
                ),
                btnNegativeText = resources.getString(R.string.lbl_no)
            )
            {
                viewModel.delete(card?.cardId.nullSafe())
            }
        }

        binding.edtCardNumber.addTextChangedListener(object : TextWatcher {
            private val space: Char = ' '
            override fun afterTextChanged(s: Editable?) {
                // Remove spacing char
                if (from != EDIT) {
                    updateCardType(binding.edtCardNumber.text.toString())
                }
                if (s!!.isNotEmpty() && s.length % 5 === 0) {
                    val c: Char = s.get(s.length - 1)
                    if (space == c) {
                        s.delete(s.length - 1, s.length)
                    }
                }
                // Insert char where needed.
                // Insert char where needed.
                if (s.isNotEmpty() && s.length % 5 == 0) {
                    val c: Char = s.get(s.length - 1)
                    // Only if its a digit where there should be a space we insert a space
                    if (Character.isDigit(c) && TextUtils.split(
                            s.toString(),
                            space.toString()
                        ).size <= 3
                    ) {
                        s.insert(s.length - 1, java.lang.String.valueOf(space))
                    }
                }
            }

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
            }

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
            }

        })
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.AddStripeCard<*> -> {

                response.data as AddStripeCardResponse

                CommonUtils.showOkCallBackDialog(
                    this,
                    title = "",
                    message = resources.getString(R.string.msg_card_added_sucessfully)
                ) {

                    val intent = Intent()
                    intent.putExtra(CARD, response.data.responseData?.addStripeCard)
                    intent.putExtra(TYPE, ADD_CARD)
                    setResult(RESULT_OK, intent)
                    finish()
                }

            }
            is Resource.UpdateStripeCard<*> -> {

                response.data as StripeCardUpdateResponse

                CommonUtils.showOkCallBackDialog(
                    this,
                    title = "",
                    message = resources.getString(R.string.msg_card_updated_sucessfully)
                ) {

                    val intent = Intent()
                    intent.putExtra(
                        CARD,
                        response.data.responseData?.updateStripeCard
                    )
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(TYPE, EDIT_CARD)
                    setResult(RESULT_OK, intent)
                    finish()
                }
            }
            is Resource.DeleteStripeCard<*> -> {

                CommonUtils.showOkCallBackDialog(
                    this,
                    title = "",
                    message = resources.getString(R.string.msg_card_deleted_sucessfully)
                ) {

                    val intent = Intent()
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(TYPE, DELETE_CARD)
                    setResult(RESULT_OK, intent)
                    finish()
                }
            }
            is Int -> {

                val stripe = Stripe(
                    this,
                    STRIPE_TOKEN,
                )

                val card = CardParams(
                    expMonth = viewModel.month.value!!.toInt(),
                    expYear = viewModel.getYearValue().toInt(),
                    cvc = viewModel.cvv.value!!,
                    number = viewModel.cardNumber.value!!
                )

                val params = SourceParams.createCardParams(card)
                stripe.createSource(params, callback = object : ApiResultCallback<Source> {

                    override fun onError(e: Exception) {

                    }

                    override fun onSuccess(result: Source) {
                        JLog.e("source", result.toString())
                    }

                })


                stripe.createCardToken(
                    card,
                    callback = object : ApiResultCallback<Token> {

                        override fun onSuccess(result: Token) {

                            viewModel.addCardApi(result.id.nullSafe())
                           // viewModel.addCardApiS()

                            JLog.e("token", result.toString())
                        }

                        override fun onError(e: Exception) {
                            JLog.e("onError", e.toString())
                            if (e is CardException) {
                                e.message?.let { showToast(it) }
                            }
                        }
                    })
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    private fun onCardTypeChanged(cardType: CardType) {
        if (cardType === CardType.EMPTY) {
            binding.edtCardNumber.setCompoundDrawablesRelativeWithIntrinsicBounds(
                ContextCompat.getDrawable(
                    this@AddCardActivity,
                    CardType.UNKNOWN.frontResource
                ), null, null, null
            )
        } else {
            binding.edtCardNumber.setCompoundDrawablesRelativeWithIntrinsicBounds(
                ContextCompat.getDrawable(
                    this@AddCardActivity,
                    cardType.frontResource
                ), null, null, null
            )
        }
    }

    private fun updateCardType(s: String) {
        val type = CardType.forCardNumber(s.replace(" ", ""))
        type?.let {
            onCardTypeChanged(it)
        }
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}