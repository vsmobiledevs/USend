package com.usend.views.home

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.view.View
import android.widget.AdapterView
import android.widget.ArrayAdapter
import androidx.lifecycle.Observer
import com.base.network.model.GetReasonResponse
import com.base.network.model.ReasonList
import com.base.network.model.User
import com.usend.R
import com.usend.comman.Resource
import com.usend.base.ViewModelActivity
import com.usend.databinding.ActivityContactUsBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.utils.CommonUtils
import com.usend.utils.CommonUtils.showAffirmationDialog
import com.usend.utils.JLog
import com.usend.utils.PreferenceHelper
import com.usend.viewmodels.ContactUsViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class ContactUsActivity(
    override val modelClass: KClass<ContactUsViewModel> = ContactUsViewModel::class,
    override val layoutId: Int = R.layout.activity_contact_us
) : ViewModelActivity<ActivityContactUsBinding, ContactUsViewModel>() {

    private val TAG = ContactUsActivity::class.java.simpleName

    private var reasonList = arrayListOf<String>()
    private var arrayListReasons = arrayListOf<ReasonList>()

    private var isInitial = true
    private var user : User? = null

    @SuppressLint("SetTextI18n")
    override fun initView() {
        super.initView()

        user = PreferenceHelper.getUserObject()

        binding.txtEmail.text = user?.email
        binding.txtName.text = user?.firstName + " " + user?.lastName

        initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_contact_us))
        binding.viewModel = viewModel
        binding.activity = this

        //viewModel.getContactUsReasons()

        binding.spnReason.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{

            override fun onNothingSelected(parent: AdapterView<*>?) {
            }

            override fun onItemSelected(
                parent: AdapterView<*>?,
                view: View?,
                position: Int,
                id: Long
            ) {
                if(!isInitial) {
                    viewModel.reasonId.value = arrayListReasons[position].id
                    viewModel.reason.value = reasonList[position]
                }
            }
        }
    }

    fun openSpinner()
    {
        isInitial = false
        binding.spnReason.performClick()
    }

    override fun initControls() {
        super.initControls()

        binding.btnSubmit.setOnClickListener {
            viewModel.submit(binding.txtEmail.text.toString(), binding.txtName.text.toString())
        }
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                showAffirmationDialog(title = resources.getString(R.string.msg_thank_you), btnText = resources.getString(R.string.lbl_okay)){
                    onBackPressed()
                }
            }
            is Resource.GetReasonsSuccess<*> -> {

                response.data as GetReasonResponse

                arrayListReasons.addAll(response.data.responseData?.reason!!)

                reasonList.add(resources.getString(R.string.lbl_select))
                arrayListReasons.forEachIndexed { _, it ->

                    reasonList.add(it.name.nullSafe())
                }

                val spinnerAdapter = ArrayAdapter(this, R.layout.spinner_item, reasonList)
                spinnerAdapter.setDropDownViewResource(R.layout.spinner_drop_down_item)
                binding.spnReason.adapter = spinnerAdapter

                binding.spnReason.setSelection(-1)

            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }


    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}