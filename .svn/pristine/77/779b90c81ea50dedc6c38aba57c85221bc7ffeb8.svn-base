package com.usend.viewmodels

import android.app.Application
import android.content.Context
import androidx.lifecycle.MediatorLiveData
import com.base.network.model.CreateCard
import com.usend.R
import com.usend.base.BaseViewModel
import com.usend.comman.Resource
import com.usend.extensions.checkInternetConnected
import com.usend.repository.UserRepository
import com.usend.utils.DateTimeUtil

class AddCardViewModel(
    application: Application,
    private var repository: UserRepository
) :
    BaseViewModel(application) {

    val mContext: Context = application.applicationContext

    val status: MediatorLiveData<Any> by lazy {
        MediatorLiveData<Any>()
    }

    val cardNumber by lazy { MediatorLiveData<String>() }
    val cardName by lazy { MediatorLiveData<String>() }
    val month by lazy { MediatorLiveData<String>() }
    val year by lazy { MediatorLiveData<String>() }
    val cvv by lazy { MediatorLiveData<String>() }

    fun add() {

        when {
            !mContext.checkInternetConnected() -> status.value =
                Resource.NoInternetError<Int>(R.string.default_internet_message)
            cardNumber.value.isNullOrEmpty() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_card_number_can_be_blank)
            cardNumber.value!!.length < 15 -> status.value =
                Resource.ValidationError<Int>(R.string.msg_please_enter_valid_card_number)
            /*cardName.value.isNullOrEmpty() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_card_name_can_not_be_blank)*/
            month.value.isNullOrEmpty() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_select_valid_month)
            year.value.isNullOrEmpty() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_select_valid_year)
            month.value!!.toInt() > 12 -> status.value =
                Resource.ValidationError<Int>(R.string.msg_select_valid_month)
            getYearValue().toInt() < DateTimeUtil.getCurrentYear().toInt() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_enter_valid_month_year)
            month.value!!.toInt() < DateTimeUtil.getCurrentMonth()
                .toInt() && getYearValue().toInt() <= DateTimeUtil.getCurrentYear()
                .toInt() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_enter_valid_month_year)
            cvv.value.isNullOrEmpty() -> status.value =
                Resource.ValidationError<Int>(R.string.msg_cvv_can_not_be_blank)
            cvv.value!!.length < 3 -> status.value =
                Resource.ValidationError<Int>(R.string.msg_enter_valid_cvv_number)
            else -> {
                status.value = 0
            }
        }
    }

    fun getYearValue(): String {
        if ((year.value?.length ?: 0) <= 2)
            return ("20" + (year.value ?: "00"))
        else
            return year.value?:"0"
    }

    fun addCardApi(stripeSourceToken: String) {
        when {
            !mContext.checkInternetConnected() -> status.value =
                Resource.NoInternetError<Int>(R.string.default_internet_message)
            else -> {
                status.addSource(
                    repository.addStripeCard(
                        stripeSourceToken = stripeSourceToken,
                        authKey = getAuthKey()
                    )
                ) {

                    if (it is Resource.AddStripeCard<*>) {

                    }
                    status.value = it
                }
            }
        }
    }


    fun delete(card_id: String) {

        when {
            !mContext.checkInternetConnected() -> status.value =
                Resource.NoInternetError<Int>(R.string.default_internet_message)
            else -> {
                status.addSource(
                    repository.deleteStripeCard(authKey = getAuthKey(), card_id = card_id)
                ) {

                    if (it is Resource.DeleteStripeCard<*>) {

                    }
                    status.value = it
                }
            }
        }
    }

    fun updateCardApi(card_id: String, card_name: String, exp_month: String, exp_year: String) {
        when {
            !mContext.checkInternetConnected() -> status.value =
                Resource.NoInternetError<Int>(R.string.default_internet_message)
            else -> {
                status.addSource(
                    repository.updateStripeCard(
                        authKey = getAuthKey(),
                        card_id = card_id,
                        card_name = card_name,
                        exp_month = exp_month,
                        exp_year = exp_year
                    )
                ) {

                    if (it is Resource.UpdateStripeCard<*>) {

                    }
                    status.value = it
                }
            }
        }
    }
}