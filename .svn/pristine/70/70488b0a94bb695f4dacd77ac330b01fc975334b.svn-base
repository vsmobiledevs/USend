package com.usend.views.home

import android.Manifest
import android.app.Activity
import android.content.Context
import android.content.Intent
import androidx.lifecycle.Observer
import com.amplifyframework.AmplifyException
import com.amplifyframework.auth.cognito.AWSCognitoAuthPlugin
import com.amplifyframework.core.Amplify
import com.amplifyframework.storage.s3.AWSS3StoragePlugin
import com.usend.R
import com.usend.base.ViewModelActivity
import com.usend.comman.Resource
import com.usend.databinding.ActivityCreateNewReqBinding
import com.usend.extensions.loadImageUrl
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.utils.*
import com.usend.utils.CommonUtils.dpToPx
import com.usend.utils.CommonUtils.showAffirmationDialog
import com.usend.viewmodels.CreateReqViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import java.io.File
import kotlin.reflect.KClass

class CreateNewReqActivity(
    override val modelClass: KClass<CreateReqViewModel> = CreateReqViewModel::class,
    override val layoutId: Int = R.layout.activity_create_new_req
) : ViewModelActivity<ActivityCreateNewReqBinding, CreateReqViewModel>() {

    private val TAG = CreateNewReqActivity::class.java.simpleName

    override fun initView() {
        super.initView()

        initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_create_new_req))
        binding.viewModel = viewModel
        binding.activity = this
        viewModel.activityContext = this
    }

    override fun initControls() {

        try {
            // Add these lines to add the AWSCognitoAuthPlugin and AWSS3StoragePlugin plugins

            Amplify.addPlugin(AWSCognitoAuthPlugin())
            Amplify.addPlugin(AWSS3StoragePlugin())
            Amplify.configure(applicationContext)

            JLog.e("MyAmplifyApp", "Initialized Amplify")
        } catch (error: AmplifyException) {
            JLog.e("MyAmplifyApp", "Could not initialize Amplify$error")
        }
    }

    fun uploadProductImage() {

        viewModel.requestPermission(
            this,
            arrayOf(Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE)
        ) { isGranted ->
            if (isGranted) {
                val intent = getPickImageIntent(this)
                startActivityForResult(intent) { data ->
                    checkImagePickerIntentResult(this, intent, data) { filePath, _ ->

                        if (filePath != null) {

                            viewModel.productImage.value = DateTimeUtil.getCurrentTimeStamp() + JPG
                            viewModel.mFile.value = File(filePath)
                            binding.imgProductImage.loadImageUrl(
                                this,
                                filePath,
                                cornerRadius = dpToPx(this, 10)
                            ) {

                            }
                        }
                    }
                }
            }
        }
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                showAffirmationDialog(
                    title = resources.getString(R.string.msg_your_req_submitted),
                    btnText = resources.getString(
                        R.string.lbl_okay
                    )
                ) {
                    val intent = Intent()
                    setResult(Activity.RESULT_OK, intent)
                    finish()
                }

            }
            is Int -> {

            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    fun onSubmitClick() {
        viewModel.submit()
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}