package com.usend.repository

import android.util.Log
import androidx.lifecycle.MutableLiveData
import com.base.network.ApiClient
import com.base.network.api.*
import com.base.network.model.*
import com.usend.comman.Resource
import com.usend.utils.*
import retrofit2.Call
import retrofit2.Response
import java.math.BigDecimal


object UserRepository {

    val packageClient: PackageApi by lazy {

        ApiClient().createService(PackageApi::class.java)
    }

    val userClient: UserApi by lazy {

        ApiClient().createService(UserApi::class.java)
    }

    val contentPagesClient: CmsPagesApi by lazy {

        ApiClient().createService(CmsPagesApi::class.java)
    }

    val conciergeClient: ConciergeRequestApi by lazy {

        ApiClient().createService(ConciergeRequestApi::class.java)
    }

    private val countryClient: CountryApi by lazy {

        ApiClient().createService(CountryApi::class.java)
    }

    val shippingAddressApi: ShippingAddressApi by lazy {

        ApiClient().createService(ShippingAddressApi::class.java)
    }

    val shippingMethodApi: ShipStationApi by lazy {

        ApiClient().createService(ShipStationApi::class.java)
    }

    val notificationApi: NotificationApi by lazy {

        ApiClient().createService(NotificationApi::class.java)
    }

    val conciergePaymentApi: ConciergePaymentApi by lazy {

        ApiClient().createService(ConciergePaymentApi::class.java)
    }

    val orderApi: OrderApi by lazy {

        ApiClient().createService(OrderApi::class.java)
    }

    val subApi: SubscriptionsApi by lazy {

        ApiClient().createService(SubscriptionsApi::class.java)
    }

    val stripeCardApi: StripeCardApi by lazy {

        ApiClient().createService(StripeCardApi::class.java)
    }
    val squareupCardApi: SquareUpCardApi by lazy {

        ApiClient().createServiceSquareup(SquareUpCardApi::class.java)
    }

    fun getPackageList(authToken: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall = packageClient.packageList(authorization = authToken)

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<ListPackageResponse> {
            override fun onResponse(
                call: Call<ListPackageResponse>,
                response: Response<ListPackageResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: ListPackageResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<ListPackageResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getPackageDetails(authToken: String, id: Int): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall = packageClient.packageDetails(authorization = authToken, id = id)

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<PackageDetailResponse> {
            override fun onResponse(
                call: Call<PackageDetailResponse>,
                response: Response<PackageDetailResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: PackageDetailResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<PackageDetailResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun splitPackage(authToken: String, id: Int, count: Int): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall =
            packageClient.splitPackage(authorization = authToken, id = id, splitCount = count)

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<SuccessModel> {
            override fun onResponse(
                call: Call<SuccessModel>,
                response: Response<SuccessModel>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.SplitSuccess(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getProfileData(authToken: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall = userClient.getUserProfile(authorization = authToken)

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<SignUpReponse> {
            override fun onResponse(call: Call<SignUpReponse>, response: Response<SignUpReponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SignUpReponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SignUpReponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun updateProfileData(
        authToken: String,
        vFirstName: String,
        vLastName: String,
        email: String,
        countryId: Int,
        phone: String,
        state: String,
        city: String,
        addressLine1: String,
        addressLine2: String,
        zipCode: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall = userClient.editUserProfile(
            authorization = authToken,
            firstName = vFirstName,
            lastName = vLastName,
            email = email,
            street1 = addressLine1,
            street2 = addressLine2,
            postalCode = zipCode,
            state = state,
            city = city,
            phone = phone,
            countryCodeId = countryId
        )

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<SignUpReponse> {
            override fun onResponse(call: Call<SignUpReponse>, response: Response<SignUpReponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SignUpReponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SignUpReponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun changePassword(
        authToken: String,
        currentPassword: String,
        newPassword: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall = userClient.changePassword(
            authorization = authToken,
            currentPassword = currentPassword,
            password = newPassword
        )

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<SuccessModel> {
            override fun onResponse(call: Call<SuccessModel>, response: Response<SuccessModel>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun changeUnitSystem(
        authToken: String,
        unit_system: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val packageCall = userClient.changeUnit(
            authorization = authToken,
            unitSystem = unit_system
        )

        data.value = Resource.Loading<Boolean>(true)

        packageCall.enqueue(object : retrofit2.Callback<SuccessModel> {
            override fun onResponse(call: Call<SuccessModel>, response: Response<SuccessModel>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.ChangeUnitSuccess(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getShipToAddressList(
        authToken: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall = shippingAddressApi.shippingAddressList(authorization = authToken)

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<ListAddressResponse> {
            override fun onResponse(
                call: Call<ListAddressResponse>,
                response: Response<ListAddressResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: ListAddressResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<ListAddressResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun addShippingAddress(
        label: String,
        receiverName: String,
        addressLine1: String,
        addressLine2: String,
        state: String,
        city: String,
        zipcode: String,
        countryCodeId: Int,
        phone: String,
        authToken: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall = shippingAddressApi.createShippingAddresses(
            label = label,
            receiverName = receiverName,
            countryCodeId = countryCodeId,
            phone = phone,
            state = state,
            city = city,
            street1 = addressLine1,
            street2 = addressLine2,
            postalCode = zipcode,
            isBillingAddress = false,
            authorization = authToken
        )

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<CreateAddressResponse> {
            override fun onResponse(
                call: Call<CreateAddressResponse>,
                response: Response<CreateAddressResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: CreateAddressResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<CreateAddressResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun updateShippingAddress(
        id: Int,
        label: String,
        receiverName: String,
        addressLine1: String,
        addressLine2: String,
        state: String,
        city: String,
        zipcode: String,
        countryCodeId: Int,
        phone: String,
        authToken: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall = shippingAddressApi.editShippingAddresses(
            label = label,
            receiverName = receiverName,
            countryCodeId = countryCodeId,
            phone = phone,
            state = state,
            city = city,
            street1 = addressLine1,
            street2 = addressLine2,
            postalCode = zipcode,
            isBillingAddress = false,
            authorization = authToken,
            id = id
        )

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<EditShippingAddressReponse> {
            override fun onResponse(
                call: Call<EditShippingAddressReponse>,
                response: Response<EditShippingAddressReponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: EditShippingAddressReponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.EditAddressSuccess(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<EditShippingAddressReponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun deleteShippingAddress(authToken: String, id: Int): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall =
            shippingAddressApi.deleteShippingAddress(id = id, authorization = authToken)

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<SuccessModel> {
            override fun onResponse(
                call: Call<SuccessModel>,
                response: Response<SuccessModel>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.DeleteAddressSuccess(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getShippingMethods(
        authToken: String,
        package_ids: String,
        address_id: Int,
        carrier_code : String,
        profile_filter : String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        //val jObj = ShipStationData(13,"12")

        val shippingMethodCall = shippingMethodApi.getCarrierRateList(
            authorization = authToken,
            addressId = address_id,
            packageId = package_ids,
            carrierCode = carrier_code,
            priceFilter = profile_filter
        )

        data.value = Resource.Loading<Boolean>(true)

        shippingMethodCall.enqueue(object : retrofit2.Callback<ListGetRatesResponse> {
            override fun onResponse(
                call: Call<ListGetRatesResponse>,
                response: Response<ListGetRatesResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: ListGetRatesResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }

            }

            override fun onFailure(call: Call<ListGetRatesResponse>, t: Throwable) {
                t.printStackTrace()
                JLog.e("error", "${t.localizedMessage}")
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getShippingDetails(
        authToken: String,
        service_name: String,
        package_Ids: String,
        address_id: Int,
        cost: Double,
        carrierCode: String,
        serviceCode: String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall = shippingAddressApi.shippingDetails(
            authorization = authToken, id = address_id, serviceName = service_name,
            shipmentCost = cost.toBigDecimal(), packageId = package_Ids,
            carrierCode = carrierCode, serviceCode = serviceCode
        )

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<ShippingDetailsResponse> {
            override fun onResponse(
                call: Call<ShippingDetailsResponse>,
                response: Response<ShippingDetailsResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: ShippingDetailsResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<ShippingDetailsResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getOrderLists(authToken: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall = orderApi.orderList(authorization = authToken)

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<OrderListResponse> {
            override fun onResponse(
                call: Call<OrderListResponse>,
                response: Response<OrderListResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: OrderListResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<OrderListResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getOrderDetails(
        authToken: String,
        order_id: Int
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val shipToAddressCall = orderApi.getOrder(authorization = authToken, id = order_id)

        data.value = Resource.Loading<Boolean>(true)

        shipToAddressCall.enqueue(object : retrofit2.Callback<GetOrderResponse> {
            override fun onResponse(
                call: Call<GetOrderResponse>,
                response: Response<GetOrderResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: GetOrderResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<GetOrderResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun createOrder(
        authToken: String,
        address_id: Int,
        packageId: String,
        amountPaid: String,
        shippingAmount: String,
        carrierCode: String,
        serviceCode: String,
        additional_fee: String,
        requesteShippingService: String,
        additionalChargeId: String,
        card_id: String,
        notes : String,
        declaredValue : String,
        packageContent : String,
        consolidatedFees: BigDecimal
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val createAddressCall = orderApi.createOrder(
            authorization = authToken,
            addressId = address_id,
            packageId = packageId,
            amountPaid = amountPaid,
            additionalFee = additional_fee,
            shippingAmount = shippingAmount,
            carrierCode = carrierCode,
            serviceCode = serviceCode,
            cardId = card_id,
            requesteShippingService = requesteShippingService,
            additionalChargeId = additionalChargeId,
            notes = notes,
            declaredValue = declaredValue,
            packageContent = packageContent,
            consolidatedFees=consolidatedFees
        )

        data.value = Resource.Loading<Boolean>(true)

        createAddressCall.enqueue(object : retrofit2.Callback<OrderResponse> {
            override fun onResponse(
                call: Call<OrderResponse>,
                response: Response<OrderResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: OrderResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.CreateOrderSucess(mBean)
                    } else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }


            override fun onFailure(call: Call<OrderResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getCountryList(): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = countryClient.getCountryList()

        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<GetCountryResponse> {
            override fun onResponse(
                call: Call<GetCountryResponse>,
                response: Response<GetCountryResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: GetCountryResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.GetCountryListSucess(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<GetCountryResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getStateList(): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = countryClient.usaStateList()

        data.value = Resource.Loading<Boolean>(false)

        authClientCall.enqueue(object : retrofit2.Callback<GetUSAStateList> {
            override fun onResponse(call: Call<GetUSAStateList>, response: Response<GetUSAStateList>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: GetUSAStateList? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.GetStateListSucess(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
                else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<GetUSAStateList>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getAdditionalServices(): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = shippingAddressApi.getAdditionalServiceCharge()

        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<GetAdditionalServiceChargeResponse> {

            override fun onResponse(
                call: Call<GetAdditionalServiceChargeResponse>,
                response: Response<GetAdditionalServiceChargeResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: GetAdditionalServiceChargeResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.AdditionalServicesSucess(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<GetAdditionalServiceChargeResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getContentPages(type: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = contentPagesClient.cmsPages(type = type)

        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<CmsPageResponse> {

            override fun onResponse(
                call: Call<CmsPageResponse>,
                response: Response<CmsPageResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: CmsPageResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<CmsPageResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getConciergeList(authToken: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = conciergeClient.listConciergeRequest(authorization = authToken)
        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<ListConciergeRequestResponse> {

            override fun onResponse(
                call: Call<ListConciergeRequestResponse>,
                response: Response<ListConciergeRequestResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: ListConciergeRequestResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    }
                    else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<ListConciergeRequestResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getShippingCalculator(
        countryCodeId : Int,
        city : String,
        zipCode : String,
        weight : Double,
        weight_unit : String,
        length : Double,
        width : Double,
        height : Double,
        dimensionUnit : String,
        carrierCode : String,
        priceFilter : String
        ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = shippingMethodApi.shippingCalculatorRates(countryCodeId = countryCodeId, city = city,
            postalCode = zipCode, weight = weight.toBigDecimal(), weightUnit = weight_unit, length = length.toBigDecimal(), width = width.toBigDecimal(), height = height.toBigDecimal(),
            dimensionUnit = dimensionUnit, carrierCode = carrierCode, priceFilter = priceFilter)
        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<ListshippingCalculatorRates> {

            override fun onResponse(
                call: Call<ListshippingCalculatorRates>,
                response: Response<ListshippingCalculatorRates>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: ListshippingCalculatorRates? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    }
                    else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    }else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<ListshippingCalculatorRates>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun contactUsApi(
        email: String,
        name : String,
        msg : String
    ): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = contentPagesClient.contactUsInfo(
            email = email,
            message = msg,
            name = name
        )
        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<SuccessModel> {

            override fun onResponse(
                call: Call<SuccessModel>,
                response: Response<SuccessModel>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getReasonList(): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = contentPagesClient.getReasonList()
        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<GetReasonResponse> {

            override fun onResponse(
                call: Call<GetReasonResponse>,
                response: Response<GetReasonResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: GetReasonResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.GetReasonsSuccess(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<GetReasonResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun createConciergeReq(
         authToken: String,
         desc: String,
         cost: Float,
         productName : String,
         webSiteLink : String,
         productImage : String
     ): MutableLiveData<Any> {

         val data = MutableLiveData<Any>()

         val authClientCall = conciergeClient.newConciergeRequest(
             authorization = authToken,
             description = desc,
             price = cost,
             productName = productName,
             websiteUrl = webSiteLink,
         productImage = productImage)

         data.value = Resource.Loading<Boolean>(true)

         authClientCall.enqueue(object : retrofit2.Callback<ConciergeRequestResponse> {

             override fun onResponse(
                 call: Call<ConciergeRequestResponse>,
                 response: Response<ConciergeRequestResponse>
             ) {
                 data.value = Resource.Loading<Boolean>(false)

                 if (response.isSuccessful) {
                     val mBean: ConciergeRequestResponse? = response.body()
                     if (mBean?.responseCode == SUCCESS) {
                         data.value = Resource.Success(mBean)
                     } else {
                         data.value = Resource.Error<String>(mBean?.responseMessage!!)
                     }
                 } else {
                     data.value = Resource.Error<String>(SERVER_ERROR)
                 }
             }

             override fun onFailure(call: Call<ConciergeRequestResponse>, t: Throwable) {
                 t.printStackTrace()
                 data.value = Resource.Loading<Boolean>(false)
                 data.value = Resource.Error<String>(SERVER_ERROR)
             }
         })
         return data
     }

    fun logout(authKey : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = userClient.logOut(authorization = authKey)
        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<SuccessModel> {

            override fun onResponse(
                call: Call<SuccessModel>,
                response: Response<SuccessModel>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.LogoutSuccess(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun uspsVerification(authKey : String,
               passport_image : String,
               driving_image : String,
               file_name : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = userClient.addUspsVerification(authorization = authKey, drivingImage = driving_image, passportImage = passport_image, fileName = file_name)
        data.value = Resource.Loading<Boolean>(true)

        authClientCall.enqueue(object : retrofit2.Callback<AddUspsDetailsResponse> {

            override fun onResponse(
                call: Call<AddUspsDetailsResponse>,
                response: Response<AddUspsDetailsResponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: AddUspsDetailsResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<AddUspsDetailsResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getNotificationList(authToken: String, isLoading : Boolean): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val authClientCall = notificationApi.listNotification(authorization = authToken)
        data.value = Resource.Loading<Boolean>(isLoading)

        authClientCall.enqueue(object : retrofit2.Callback<NotificationsListReponse> {

            override fun onResponse(
                call: Call<NotificationsListReponse>,
                response: Response<NotificationsListReponse>
            ) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: NotificationsListReponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.NotiListSuccess(mBean)
                    }
                    else if (mBean?.responseCode == NOT_FOUND) {
                        data.value = Resource.ItemsNotFound<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                } else {
                    data.value = Resource.Error<String>(SERVER_ERROR)
                }
            }

            override fun onFailure(call: Call<NotificationsListReponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun readNotification(authToken: String, id : Int): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = notificationApi.readNotification(authorization = authToken,
            notificationId = id)

        data.value = Resource.Loading<Boolean>(false)

        call.enqueue(object : retrofit2.Callback<SuccessModel> {
            override fun onResponse(call: Call<SuccessModel>,
                                    response: Response<SuccessModel>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.ReadNotificationSuccess(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun deleteNotification(authToken: String, id : Int, type : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = notificationApi.notificationsRemoveNotificationDelete(authorization = authToken,
            notificationId = id, type = type)

        data.value = Resource.Loading<Boolean>(false)

        call.enqueue(object : retrofit2.Callback<SuccessModel> {
            override fun onResponse(call: Call<SuccessModel>,
                                    response: Response<SuccessModel>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SuccessModel? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.DeleteNotificationSuccess(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<SuccessModel>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun payConcierge(card_id : String, payable_amount : Float, id : Int, authToken: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = conciergePaymentApi.createPayment(cardId = card_id,
            payableAmount = payable_amount, conciergeId = id, authorization = authToken)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<CreatePaymentResponse> {
            override fun onResponse(call: Call<CreatePaymentResponse>,
                                    response: Response<CreatePaymentResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: CreatePaymentResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.ConciergePayment(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<CreatePaymentResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun updateConciergeReq(id : Int, payment_id : String, authToken: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = conciergeClient.updateConciergeStatus(conciergeId = id,
            paymentIntentId = payment_id)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<GetConciergeRequestResponse> {
            override fun onResponse(call: Call<GetConciergeRequestResponse>,
                                    response: Response<GetConciergeRequestResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: GetConciergeRequestResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.UpdateConciergeReqSuccess(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<GetConciergeRequestResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun purchaseSubscription(authKey: String, purchaseSku : String, purchaseToken : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = subApi.createTransaction(authorization = authKey,
            base64Receipt = "", purchaseSku = purchaseSku, purchaseToken = purchaseToken, userType = "android")

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<CreateTransactionResponse> {
            override fun onResponse(call: Call<CreateTransactionResponse>,
                                    response: Response<CreateTransactionResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: CreateTransactionResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<CreateTransactionResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }
    fun addSqureupCard(authKey: String, createcardList : CreateCard, add: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()
         val call= squareupCardApi.addSquareUpCard(authKey, createcardList)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<SquareupCreateResponse> {
            override fun onResponse(call: Call<SquareupCreateResponse>,
                                    response: Response<SquareupCreateResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: SquareupCreateResponse? = response.body()
                    Log.e("tag","mBean"+mBean)
                    if (response.isSuccessful) {
                        if(add== ADD) {
                            Log.e("tag", "mBeanadd" + mBean)
                         //   data.value = Resource.AddUsendCard(mBean)
                        }else{
                            data.value = Resource.UpdateSquareupCard(mBean)
                        }
                        /*if (type.equals(ADD))
                        {
                            data.value = Resource.AddStripeCard(mBean)

                        }
                        else
                        {
                            data.value = Resource.UpdateStripeCard(mBean)

                        }
*/
                        val brand= mBean?.card!!.card_brand
                        val cardId= mBean.card.id
                        val expiryMonth= mBean?.card.exp_month
                        val expiryYear= mBean.card.exp_year
                        val fingerPrint= mBean.card.fingerprint
                        val createdAt= mBean.card.created_at
                        val last4= mBean.card.last_4
                        val updateAt=" "
                        val userId= mBean.card.customer_id
                        val token= PreferenceHelper.getUserObject().authenticationToken
                        Log.e("resulttoken",token.toString())

                       val addCardUsend=AddCardUsend(brand,cardId,createdAt,"", expiryMonth,expiryYear,fingerPrint, last4,updateAt,userId)
                        if (token != null) {
                            addUsendCard(token,addCardUsend,add)
                        }

                    }
                  /*  else if (response.errorBody() == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(response.error()!!)
                    }*/
                }
            }

            override fun onFailure(call: Call<SquareupCreateResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }


    fun addStripeCard(authKey: String, stripeSourceToken : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = stripeCardApi.addStripeCard(authorization = authKey,
            stripeSourceToken = stripeSourceToken)
       // val callCreate= stripeCardApi.addSquareUpCard(authKey,)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<AddStripeCardResponse> {
            override fun onResponse(call: Call<AddStripeCardResponse>,
                                    response: Response<AddStripeCardResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: AddStripeCardResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.AddStripeCard(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<AddStripeCardResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }
    fun listSquareupCard(authKey: String, customerId : String): MutableLiveData<Any> {
        val data = MutableLiveData<Any>()
        val call= squareupCardApi.listSquareUpCard(authKey, customerId)
        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<SquareUpCardList> {
            override fun onResponse(
                call: Call<SquareUpCardList>,
                response: Response<SquareUpCardList>
            ) {
               data.value = Resource.Loading<Boolean>(false)


                if (response.isSuccessful) {
                    val mBean: SquareUpCardList? = response.body()
                    data.value = Resource.AddSquareupCard(mBean)
                    Log.e("tag",mBean.toString())
                    Log.e("tag","Data:-"+data.value.toString())




//                    else if (mBean?.responseCode == UNAUTHORISED) {
//                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
//                    } else {
//                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
//                    }
                }
            }

            override fun onFailure(call: Call<SquareUpCardList>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }
    fun addUsendCard(authKey: String, addCardUsend : AddCardUsend,add: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = stripeCardApi.addUsendCard(authKey,
            addCardUsend)
        // val callCreate= stripeCardApi.addSquareUpCard(authKey,)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<UsendAddResponse> {
            override fun onResponse(call: Call<UsendAddResponse>,
                                    response: Response<UsendAddResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: UsendAddResponse? = response.body()
                    if (add== ADD)
                    {
                        data.value = Resource.AddUsendCard(mBean)

                    }
                    else
                    {
                        data.value = Resource.UpdateSquareupCard(mBean)
                        Log.e("resultupdate",mBean.toString())
                        val token= PreferenceHelper.getUserObject().authenticationToken
                        if (token != null) {
                            deleteStripeCard(SQUARE_UP_TOKEN,add)
                        }
                    }


                   /* if  (type.equals(ADD)) {
                        data.value = Resource.AddStripeCard(mBean)
                        //Log.e("resulttoken",mBean.toString())
                    }
                    else
                    {
                        data.value = Resource.UpdateStripeCard(mBean)
                    }*/
                    /*else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }*/
                }
            }

            override fun onFailure(call: Call<UsendAddResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun updateStripeCard(authKey: String, card_id : String,
    card_name : String, exp_month : String, exp_year : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = stripeCardApi.stripeCardUpdate(authorization = authKey,
            cardId = card_id, name = card_name, expMonth = exp_month, expYear = exp_year)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<StripeCardUpdateResponse> {
            override fun onResponse(call: Call<StripeCardUpdateResponse>,
                                    response: Response<StripeCardUpdateResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: StripeCardUpdateResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.UpdateStripeCard(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<StripeCardUpdateResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun deleteStripeCard(authKey: String, card_id: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = squareupCardApi.deleteSquareUpCard(authKey, card_id)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<Squareupdelete> {
            override fun onResponse(call: Call<Squareupdelete>,
                                    response: Response<Squareupdelete>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: Squareupdelete? = response.body()
                    data.value = Resource.DeleteSquareupCard(mBean)
                    val token= PreferenceHelper.getUserObject().authenticationToken
                    if (token != null) {
                        deleteUsendCard(token,card_id)
                    }
                   /* if (mBean?.responseCode == SUCCESS) {

                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }*/
                }

            }

            override fun onFailure(call: Call<Squareupdelete>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }
    fun deleteUsendCard(authKey: String, card_id : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = stripeCardApi.stripeCardDelete(authKey, card_id)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<StripeCardDeleteResponse> {
            override fun onResponse(call: Call<StripeCardDeleteResponse>,
                                    response: Response<StripeCardDeleteResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: StripeCardDeleteResponse? = response.body()
                    data.value = Resource.DeleteSquareupCard(mBean)
                    /* if (mBean?.responseCode == SUCCESS) {

                     } else if (mBean?.responseCode == UNAUTHORISED) {
                         data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                     } else {
                         data.value = Resource.Error<String>(mBean?.responseMessage!!)
                     }*/
                }

            }

            override fun onFailure(call: Call<StripeCardDeleteResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun getStripeCardsListApi(authKey: String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = stripeCardApi.stripeCardList(authorization = authKey)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<StripeCardListResponse> {
            override fun onResponse(call: Call<StripeCardListResponse>,
                                    response: Response<StripeCardListResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: StripeCardListResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.Success(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<StripeCardListResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }

    fun updateOrderAndPayment(orderId: String, payment_id : String,
                              payment_status : String, stripe_payment_id : String,
                              authKey : String): MutableLiveData<Any> {

        val data = MutableLiveData<Any>()

        val call = orderApi.updateOrderAndPayment(authorization = authKey,
        orderId = orderId, paymentId = payment_id, paymentIntentId = stripe_payment_id,
        paymentStatus = payment_status)

        data.value = Resource.Loading<Boolean>(true)

        call.enqueue(object : retrofit2.Callback<OrderListResponse> {
            override fun onResponse(call: Call<OrderListResponse>,
                                    response: Response<OrderListResponse>) {
                data.value = Resource.Loading<Boolean>(false)

                if (response.isSuccessful) {
                    val mBean: OrderListResponse? = response.body()
                    if (mBean?.responseCode == SUCCESS) {
                        data.value = Resource.UpdateOrderSuccess(mBean)
                    } else if (mBean?.responseCode == UNAUTHORISED) {
                        data.value = Resource.UnAuthorisedRequest<String>(mBean?.responseMessage!!)
                    } else {
                        data.value = Resource.Error<String>(mBean?.responseMessage!!)
                    }
                }
            }

            override fun onFailure(call: Call<OrderListResponse>, t: Throwable) {
                t.printStackTrace()
                data.value = Resource.Loading<Boolean>(false)
                data.value = Resource.Error<String>(SERVER_ERROR)
            }
        })
        return data
    }
}