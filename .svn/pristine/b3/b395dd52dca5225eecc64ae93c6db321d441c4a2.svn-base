package com.usend.views.home

import android.app.Activity
import android.content.Context
import android.content.Intent
import androidx.lifecycle.Observer
import com.base.network.model.*
import com.stripe.android.*
import com.stripe.android.model.ConfirmPaymentIntentParams
import com.stripe.android.model.PaymentMethodCreateParams
import com.stripe.android.model.StripeIntent
import com.usend.R
import com.usend.adapter.SavedPaymentMethodsItemAdapter
import com.usend.base.ViewModelActivity
import com.usend.comman.Resource
import com.usend.databinding.ActivitySavedPaymentMethodsBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.models.SavedCardsModel
import com.usend.utils.*
import com.usend.viewmodels.SavedCardsViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import java.math.BigDecimal
import kotlin.reflect.KClass
import com.usend.utils.SELETED_SERVICES as SELETED_SERVICES1

class SavedPaymentMethodsActivity(
    override val modelClass: KClass<SavedCardsViewModel> = SavedCardsViewModel::class,
    override val layoutId: Int = R.layout.activity_saved_payment_methods
) : ViewModelActivity<ActivitySavedPaymentMethodsBinding, SavedCardsViewModel>() {

    private val TAG = SavedPaymentMethodsActivity::class.java.simpleName

    private var arrayList = arrayListOf<SavedCardsModel>()
    private var selectedServices = arrayListOf<Int>()

    private var listPackageIds = arrayListOf<String>()
    private var address_id: Int? = null
    private var serviceName: String? = null
    private var serviceCode: String? = null
    private var carrierCode: String? = null
    private var shippingCost: Double? = null
    private var shippingDetails: ShippingDetailsResponse? = null
    private var additional_charges = 0.0
    private var notes: String? = null
    private var declared_value: String? = null
    private var content_of_package: String? = null
    private var stripe: Stripe? = null
    private var paymentCreateParams: PaymentMethodCreateParams? = null
    private var orderResponse: OrderResponse? = null
    private var from: String? = null
    private var conciergeRequestResponseData: ConciergeRequestResponseData? = null

    override fun getDataFromIntent() {
        super.getDataFromIntent()

        if (intent.hasExtra(FROM)) {

            from = intent.getStringExtra(FROM)

            if (from == FROM_SHIPPINGDETAIL) {
                address_id = intent.getIntExtra(ADDRESS_ID, 0)
                listPackageIds = intent.getStringArrayListExtra(PACKAGE_IDs)!!
                shippingCost = intent.getDoubleExtra(SHIPPING_COST, 0.0)
                shippingDetails = intent.getParcelableExtra(SHIPPING_DETAILS)
                selectedServices = intent.getIntegerArrayListExtra(SELETED_SERVICES1)!!
                notes = intent.getStringExtra(NOTE)
                declared_value = intent.getStringExtra(DECLARED_VALUES)
                content_of_package = intent.getStringExtra(CONTENT_OF_PACKAGE)
            } else if (from == FROM_CONCIERGE) {
                conciergeRequestResponseData = intent.getParcelableExtra(EXTRA_DATA)
            }
        }
    }

    override fun initView() {
        super.initView()

        initToolbar(
            toolbar = toolbar,
            title = resources.getString(R.string.lbl_saved_payment_methods)
        )

        PaymentConfiguration.init(this, STRIPE_TOKEN)
        stripe = Stripe(this, STRIPE_TOKEN)

        binding.rvSavedPaymentMethods.addItemDecoration(
            ItemOffsetDecoration(
                resources.getDimensionPixelOffset(
                    R.dimen.dimen_10dp
                ), "top"
            )
        )

        val uiCustomization = PaymentAuthConfig.Stripe3ds2UiCustomization.Builder()
            .setLabelCustomization(
                PaymentAuthConfig.Stripe3ds2LabelCustomization.Builder()
                    .setTextFontSize(12)
                    .build()
            )
            .build()
        PaymentAuthConfig.init(
            PaymentAuthConfig.Builder()
                .set3ds2Config(
                    PaymentAuthConfig.Stripe3ds2Config.Builder()
                        .setTimeout(5)
                        .setUiCustomization(uiCustomization)
                        .build()
                )
                .build()
        )

    }

    override fun initControls() {
        super.initControls()

        arrayList.clear()
        arrayList.add(SavedCardsModel(card = CardList(), false))
        binding.adapter = SavedPaymentMethodsItemAdapter(arrayList) { mPosition, type ->

            when (type) {
                ADD -> {
                    val intent = Intent(this, AddCardActivity::class.java)
                    intent.putExtra(FROM, ADD)
                    startActivityForResult(intent, ADD_CARD)
                }
                SELECTION -> {
                    arrayList.forEachIndexed { index, _ ->

                        arrayList[index].isSelected = mPosition == index
                    }

                    binding.adapter?.notifyDataSetChanged()
                }
            }
        }


        viewModel.getStripeCardsApi()

        binding.btnPay.setOnClickListener {

            if (from == FROM_SHIPPINGDETAIL) {
                if ((arrayList.find { it.isSelected })?.card?.cardId.nullSafe().isEmpty()) {
                    showToast(getString(R.string.lbl_select_card))
                } else {
                    viewModel.createOrder(
                        address_id = address_id!!,
                        package_ids = listPackageIds.joinToString(","),
                        amount_paid = shippingDetails?.responseData?.invoiceDetails?.totalCharges.toString()!!,
                        additional_fee = shippingDetails?.responseData?.invoiceDetails?.additionalFees.toString(),
                        shipping_amount = shippingDetails?.responseData?.shippingMethod?.shipmentCost.toString()!!,
                        carrier_code = shippingDetails?.responseData?.shippingMethod?.carrierCode!!,
                        request_shipping_service = shippingDetails?.responseData?.shippingMethod?.serviceName!!,
                        service_code = shippingDetails?.responseData?.shippingMethod?.serviceCode!!,
                        additionalChargeId = selectedServices.joinToString(","),
                        card_id = (arrayList.find { it.isSelected })?.card?.cardId.nullSafe(),
                        notes = notes.nullSafe(),
                        declared_value = declared_value.nullSafe(),
                        content_of_package = content_of_package.nullSafe(),
                        consolidatedFees = shippingDetails?.responseData?.invoiceDetails?.consolidatedFees
                            ?: BigDecimal.ZERO
                    )
                }
            } else if (from == FROM_CONCIERGE) {
                viewModel.payConciergeAmount(
                    card_id = (arrayList.find { it.isSelected })?.card?.cardId.nullSafe(),
                    amount_to_pay = conciergeRequestResponseData?.payableAmount!!.toFloat(),
                    id = conciergeRequestResponseData?.id.nullSafe()
                )
            }
        }
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                response.data as StripeCardListResponse

                response.data?.responseData?.cardList?.forEachIndexed { index, cardList ->

                    arrayList.add(SavedCardsModel(cardList, index == 0))
                }

                binding.adapter?.notifyDataSetChanged()
            }
            is Resource.CreateOrderSucess<*> -> {

                response.data as OrderResponse

                orderResponse = response.data

                if (response.data.responseData?.paymentDetails?.status == "succeeded") {
                    PaymentSuccessfulActivity.newIntent(
                        this, Intent(
                            this,
                            PaymentSuccessfulActivity::class.java
                        )
                    )
                    finishAffinity()
                } else {

                    val confirmPaymentIntent =
                        ConfirmPaymentIntentParams.create(response.data.responseData?.paymentDetails?.paymentIntentClientSecret!!)
                    stripe!!.confirmPayment(this, confirmPaymentIntent)
                }
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.UpdateOrderSuccess<*> -> {

                PaymentSuccessfulActivity.newIntent(
                    this, Intent(
                        this,
                        PaymentSuccessfulActivity::class.java
                    )
                )
                finishAffinity()

            }
            is Resource.ConciergePayment<*> -> {

                response.data as CreatePaymentResponse

                if (response.data.responseData?.paymentStatus == "succeeded") {
                    PaymentSuccessfulActivity.newIntent(
                        this, Intent(
                            this,
                            PaymentSuccessfulActivity::class.java
                        ).putExtra(FROM, FROM_CONCIERGE_PURCHASE)
                    )
                    finishAffinity()
                } else {
                    val confirmPaymentIntent =
                        ConfirmPaymentIntentParams.create(response.data.responseData?.paymentIntentClientSecret!!)
                    stripe!!.confirmPayment(this, confirmPaymentIntent)
                }
            }
            is Resource.UpdateConciergeReqSuccess<*> -> {

                PaymentSuccessfulActivity.newIntent(
                    this, Intent(
                        this,
                        PaymentSuccessfulActivity::class.java
                    ).putExtra(FROM, FROM_CONCIERGE_PURCHASE)
                )
                finishAffinity()

            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (resultCode == Activity.RESULT_OK) {
            var pos = -1
            var type = 0
            if (data != null) {
                if (data.hasExtra(POSITION)) {
                    pos = data.getIntExtra(POSITION, 0)
                    type = data.getIntExtra(TYPE, 0)
                }
            }

            when (requestCode) {

                ADD_CARD -> {

                    val card: Card? = data?.getParcelableExtra(CARD)

                    arrayList.add(
                        1, SavedCardsModel(
                            CardList(
                                cardId = card?.cardId,
                                brand = card?.brand,
                                cardHolderName = card?.cardHolderName,
                                expiryMonth = card?.expiryMonth,
                                expiryYear = card?.expiryYear,
                                last4 = card?.last4
                            ), arrayList.size == 1
                        )
                    )

                    binding.adapter?.notifyItemInserted(1)
                }
                STRIPE_CODE -> {

                    stripe?.onPaymentResult(
                        requestCode,
                        data,
                        object : ApiResultCallback<PaymentIntentResult> {

                            override fun onError(e: Exception) {
                                TODO("Not yet implemented")
                            }

                            override fun onSuccess(result: PaymentIntentResult) {

                                val paymentIntent = result.intent

                                if (paymentIntent.status != null) {


                                    if (paymentIntent.status == StripeIntent.Status.Succeeded) {

                                        if (from == FROM_SHIPPINGDETAIL) {
                                            viewModel.setOrderStatus(
                                                orderId = orderResponse?.responseData?.paymentDetails?.orderId.toString(),
                                                paymentId = orderResponse?.responseData?.paymentDetails?.id.toString(),
                                                stripePaymentId = paymentIntent.id!!,
                                                paymentStatus = paymentIntent.status.toString(),
                                            )
                                        } else {
                                            viewModel.updateConciergeReq(
                                                id = conciergeRequestResponseData?.id.nullSafe(),
                                                payment_id = paymentIntent.id!!
                                            )
                                        }

                                    } else {
                                        CommonUtils.showOkCallBackDialog(
                                            this@SavedPaymentMethodsActivity,
                                            message = paymentIntent.lastPaymentError?.message
                                        )
                                        {

                                        }
                                    }
                                }

                            }
                        })
                }

            }
        }
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }

}