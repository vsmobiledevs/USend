package com.usend.views.home

import android.app.Activity
import android.content.Context
import android.content.Intent
import androidx.lifecycle.Observer
import com.base.network.model.AddressList
import com.base.network.model.ListAddressResponse
import com.base.network.model.SuccessModel
import com.usend.R
import com.usend.adapter.ShippingAddressItemAdapter
import com.usend.comman.Resource
import com.usend.base.ViewModelActivity
import com.usend.databinding.ActivityShippingAddressBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.utils.*
import com.usend.viewmodels.ShipToAddressViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class ShippingAddressActivity(
    override val modelClass: KClass<ShipToAddressViewModel> = ShipToAddressViewModel::class,
    override val layoutId: Int = R.layout.activity_shipping_address
) : ViewModelActivity<ActivityShippingAddressBinding, ShipToAddressViewModel>() {

    private var arrayList = arrayListOf<AddressList>()
    private val TAG = ShippingAddressActivity::class.java.simpleName
    private var deletePos : Int = 0

    override fun initView() {
        super.initView()

        initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_shipping_address))

        viewModel.getShipToAddressList()

        binding.rvShipAddresses.addItemDecoration(
            ItemOffsetDecoration(resources.getDimensionPixelOffset(R.dimen.dimen_10dp), "top", pos = 1))

        arrayList.clear()
        arrayList.add(AddressList())

        binding.adapter = ShippingAddressItemAdapter(arrayList) { mPos, type ->

            when (type) {

                ADD -> {
                    val intent = Intent(this, AddNewAddressActivity::class.java)
                    intent.putExtra(FROM,ADD)
                    startActivityForResult(intent, ADD_ADDRESS)
                }
                DELETE -> {
                        viewModel.delete(arrayList[mPos].id.nullSafe())
                        deletePos = mPos
                }
                EDIT -> {
                    val intent = Intent(this, AddNewAddressActivity::class.java)
                    intent.putExtra(FROM, EDIT)
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(ADDRESS, arrayList[mPos])
                    startActivityForResult(intent, EDIT_ADDRESS)
                }
                NORMAL -> {
                    val intent = Intent(this, AddNewAddressActivity::class.java)
                    intent.putExtra(FROM, EDIT)
                    intent.putExtra(POSITION, mPos)
                    intent.putExtra(ADDRESS, arrayList[mPos])
                    startActivityForResult(intent, EDIT_ADDRESS)
                }
            }
        }
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {
                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                response.data as ListAddressResponse

                arrayList.addAll(response.data?.responseData?.addresses!!)

                binding.adapter?.notifyDataSetChanged()
            }
            is Resource.DeleteAddressSuccess<*> -> {

                response.data as SuccessModel

                arrayList.removeAt(deletePos)

                CommonUtils.showOkCallBackDialog(this,title = "", message = resources.getString(R.string.msg_address_deleted_sucessfully)){
                    binding.adapter?.notifyItemRemoved(deletePos)
                }
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {

                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == Activity.RESULT_OK) {

            var address: AddressList? = data?.getParcelableExtra(ADDRESS)
            var pos = -1
            var type = 0
            if(data != null)
            {
                if(data.hasExtra(POSITION))
                {
                    pos = data.getIntExtra(POSITION,0)
                    type = data.getIntExtra(TYPE,0)
                }
            }

            when (requestCode) {

                ADD_ADDRESS -> {

                    arrayList.add(1,address!!)

                    binding.adapter?.notifyItemInserted(1)
                }

                EDIT_ADDRESS -> {

                    if(type == EDIT_ADDRESS)
                    {
                        arrayList[pos] = address!!

                        binding.adapter?.notifyItemChanged(pos)
                    }
                    else if(type == DELETE_ADDRESS)
                    {
                        arrayList.removeAt(pos)

                        binding.adapter?.notifyItemRemoved(pos)
                    }
                }
            }
        }
    }

    override fun initControls() {
        super.initControls()
    }

    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}