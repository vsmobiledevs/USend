package com.usend.views.home

import android.app.Activity
import android.content.Context
import android.content.Intent
import androidx.lifecycle.Observer
import com.base.network.model.*
import com.stripe.android.ApiResultCallback
import com.stripe.android.Stripe
import com.stripe.android.model.CardParams
import com.stripe.android.model.Source
import com.stripe.android.model.SourceParams
import com.usend.R
import com.usend.adapter.SavedCardsItemAdapter
import com.usend.base.BaseViewModel
import com.usend.base.ViewModelActivity
import com.usend.comman.Resource
import com.usend.databinding.ActivitySavedCardsBinding
import com.usend.extensions.nullSafe
import com.usend.extensions.showToast
import com.usend.models.SavedCardsModel
import com.usend.utils.*
import com.usend.viewmodels.SavedCardsViewModel
import kotlinx.android.synthetic.main.app_toolbar.*
import kotlin.reflect.KClass

class SavedCardsActivity(
    override val modelClass: KClass<SavedCardsViewModel> = SavedCardsViewModel::class,
    override val layoutId: Int = R.layout.activity_saved_cards
) : ViewModelActivity<ActivitySavedCardsBinding, SavedCardsViewModel>() {

    private var arrayList = arrayListOf<CardList>()
    private val TAG = SavedCardsActivity::class.java.simpleName

    override fun initView() {
        super.initView()

        initToolbar(toolbar = toolbar, title = resources.getString(R.string.lbl_saved_payment_methods))
        binding.rvSavedCards.addItemDecoration(
            ItemOffsetDecoration(
                resources.getDimensionPixelOffset(R.dimen.dimen_10dp), "top", pos = 1)
        )
    }

    override fun initControls() {
        super.initControls()

        arrayList.clear()
        arrayList.add(CardList())

        binding.adapter = SavedCardsItemAdapter(arrayList) { mPosition, type ->

            when (type) {
                ADD -> {
                    val intent = Intent(this, AddCardActivity::class.java)
                    intent.putExtra(FROM, ADD)
                    startActivityForResult(intent, ADD_CARD)
                }
                DELETE -> {
                    arrayList.removeAt(mPosition)
                    binding.adapter?.notifyItemRemoved(mPosition)
                }
                EDIT -> {
                    val intent = Intent(this, AddCardActivity::class.java)
                    intent.putExtra(FROM, EDIT)
                    intent.putExtra(POSITION, mPosition)
                    intent.putExtra(CARD, arrayList[mPosition])
                    startActivityForResult(intent, EDIT_CARD)
                }
            }

        }

        viewModel.getStripeCardsApi()
    }

    override fun addObserver() {
        viewModel.status.observe(this, mObserver)
    }

    private val mObserver = Observer<Any> { response ->
        when (response) {
            is Resource.Error<*> -> {

                JLog.e(TAG, "Message: ${response.data}")
                showToast(response.message.toString())
            }
            is Resource.Success<*> -> {

                response.data as StripeCardListResponse

                arrayList.addAll(response.data.responseData?.cardList!!)

                binding.adapter?.notifyDataSetChanged()
            }
            is Resource.Loading<*> -> {

                response.isLoadingShow.let {
                    if (it as Boolean) {
                        showProgressDialog(this)
                    } else {
                        hideProgressDialog()
                    }
                }
            }
            is Resource.NoInternetError<*> -> {
                // use if you wanna show dialog or snackbar
                CommonUtils.showOkDialog(this, message = resources.getString(response.id!!))
            }
            is Resource.ValidationError<*> -> {
                showToast(resources.getString(response.id.nullSafe()))
            }
            is Resource.UnAuthorisedRequest<*> -> {
                showTokenExpiredDialog(resources.getString(R.string.lbl_session_expired_msg))
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == Activity.RESULT_OK) {

            var pos = -1
            var type = 0
            if(data != null)
            {
                if(data.hasExtra(POSITION))
                {
                    pos = data.getIntExtra(POSITION,0)
                    type = data.getIntExtra(TYPE,0)
                }
            }

            when (requestCode) {

                ADD_CARD -> {

                    val card: Card? = data?.getParcelableExtra(CARD)

                    arrayList.add(1, CardList(cardId = card?.cardId,
                        brand = card?.brand,
                        cardHolderName = card?.cardHolderName,
                        expiryMonth = card?.expiryMonth,
                        expiryYear = card?.expiryYear,
                        last4 = card?.last4))

                    binding.adapter?.notifyItemInserted(1)
                }

                EDIT_CARD -> {

                    if(type == EDIT_CARD)
                    {

                        val card: UpdateCard? = data?.getParcelableExtra(CARD)

                        arrayList[pos] = CardList(cardId = card?.cardId,
                            brand = card?.brand,
                            cardHolderName = card?.cardHolderName,
                            expiryMonth = card?.expiryMonth,
                            expiryYear = card?.expiryYear,
                            last4 = card?.last4)

                        binding.adapter?.notifyItemChanged(pos)
                    }
                    else if(type == DELETE_CARD)
                    {
                        arrayList.removeAt(pos)

                        binding.adapter?.notifyItemRemoved(pos)
                    }
                }
            }
        }
    }


    companion object {
        fun newIntent(context: Context, intent: Intent) {
            context.startActivity(intent)
        }
    }
}